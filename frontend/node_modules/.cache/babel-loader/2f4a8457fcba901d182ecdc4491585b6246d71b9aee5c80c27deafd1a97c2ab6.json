{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.set.difference.v2.js\";\nimport \"core-js/modules/esnext.set.intersection.v2.js\";\nimport \"core-js/modules/esnext.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/esnext.set.is-subset-of.v2.js\";\nimport \"core-js/modules/esnext.set.is-superset-of.v2.js\";\nimport \"core-js/modules/esnext.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/esnext.set.union.v2.js\";\n/*!\n  * message-compiler v10.0.0-alpha.3\n  * (c) 2024 kazuya kawaguchi\n  * Released under the MIT License.\n  */\nconst LOCATION_STUB = {\n  start: {\n    line: 1,\n    column: 1,\n    offset: 0\n  },\n  end: {\n    line: 1,\n    column: 1,\n    offset: 0\n  }\n};\nfunction createPosition(line, column, offset) {\n  return {\n    line,\n    column,\n    offset\n  };\n}\nfunction createLocation(start, end, source) {\n  const loc = {\n    start,\n    end\n  };\n  if (source != null) {\n    loc.source = source;\n  }\n  return loc;\n}\n\n/**\n * Original Utilities\n * written by kazuya kawaguchi\n */\nconst RE_ARGS = /\\{([0-9a-zA-Z]+)\\}/g;\n/* eslint-disable */\nfunction format(message, ...args) {\n  if (args.length === 1 && isObject(args[0])) {\n    args = args[0];\n  }\n  if (!args || !args.hasOwnProperty) {\n    args = {};\n  }\n  return message.replace(RE_ARGS, (match, identifier) => {\n    return args.hasOwnProperty(identifier) ? args[identifier] : '';\n  });\n}\nconst assign = Object.assign;\nconst isString = val => typeof val === 'string';\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst isObject = val => val !== null && typeof val === 'object';\nfunction join(items, separator = '') {\n  return items.reduce((str, item, index) => index === 0 ? str + item : str + separator + item, '');\n}\nconst CompileErrorCodes = {\n  // tokenizer error codes\n  EXPECTED_TOKEN: 1,\n  INVALID_TOKEN_IN_PLACEHOLDER: 2,\n  UNTERMINATED_SINGLE_QUOTE_IN_PLACEHOLDER: 3,\n  UNKNOWN_ESCAPE_SEQUENCE: 4,\n  INVALID_UNICODE_ESCAPE_SEQUENCE: 5,\n  UNBALANCED_CLOSING_BRACE: 6,\n  UNTERMINATED_CLOSING_BRACE: 7,\n  EMPTY_PLACEHOLDER: 8,\n  NOT_ALLOW_NEST_PLACEHOLDER: 9,\n  INVALID_LINKED_FORMAT: 10,\n  // parser error codes\n  MUST_HAVE_MESSAGES_IN_PLURAL: 11,\n  UNEXPECTED_EMPTY_LINKED_MODIFIER: 12,\n  UNEXPECTED_EMPTY_LINKED_KEY: 13,\n  UNEXPECTED_LEXICAL_ANALYSIS: 14,\n  // generator error codes\n  UNHANDLED_CODEGEN_NODE_TYPE: 15,\n  // minifier error codes\n  UNHANDLED_MINIFIER_NODE_TYPE: 16,\n  // Special value for higher-order compilers to pick up the last code\n  // to avoid collision of error codes. This should always be kept as the last\n  // item.\n  __EXTEND_POINT__: 17\n};\n/** @internal */\nconst errorMessages = {\n  // tokenizer error messages\n  [CompileErrorCodes.EXPECTED_TOKEN]: `Expected token: '{0}'`,\n  [CompileErrorCodes.INVALID_TOKEN_IN_PLACEHOLDER]: `Invalid token in placeholder: '{0}'`,\n  [CompileErrorCodes.UNTERMINATED_SINGLE_QUOTE_IN_PLACEHOLDER]: `Unterminated single quote in placeholder`,\n  [CompileErrorCodes.UNKNOWN_ESCAPE_SEQUENCE]: `Unknown escape sequence: \\\\{0}`,\n  [CompileErrorCodes.INVALID_UNICODE_ESCAPE_SEQUENCE]: `Invalid unicode escape sequence: {0}`,\n  [CompileErrorCodes.UNBALANCED_CLOSING_BRACE]: `Unbalanced closing brace`,\n  [CompileErrorCodes.UNTERMINATED_CLOSING_BRACE]: `Unterminated closing brace`,\n  [CompileErrorCodes.EMPTY_PLACEHOLDER]: `Empty placeholder`,\n  [CompileErrorCodes.NOT_ALLOW_NEST_PLACEHOLDER]: `Not allowed nest placeholder`,\n  [CompileErrorCodes.INVALID_LINKED_FORMAT]: `Invalid linked format`,\n  // parser error messages\n  [CompileErrorCodes.MUST_HAVE_MESSAGES_IN_PLURAL]: `Plural must have messages`,\n  [CompileErrorCodes.UNEXPECTED_EMPTY_LINKED_MODIFIER]: `Unexpected empty linked modifier`,\n  [CompileErrorCodes.UNEXPECTED_EMPTY_LINKED_KEY]: `Unexpected empty linked key`,\n  [CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS]: `Unexpected lexical analysis in token: '{0}'`,\n  // generator error messages\n  [CompileErrorCodes.UNHANDLED_CODEGEN_NODE_TYPE]: `unhandled codegen node type: '{0}'`,\n  // minimizer error messages\n  [CompileErrorCodes.UNHANDLED_MINIFIER_NODE_TYPE]: `unhandled mimifier node type: '{0}'`\n};\nfunction createCompileError(code, loc, options = {}) {\n  const {\n    domain,\n    messages,\n    args\n  } = options;\n  const msg = format((messages || errorMessages)[code] || '', ...(args || []));\n  const error = new SyntaxError(String(msg));\n  error.code = code;\n  if (loc) {\n    error.location = loc;\n  }\n  error.domain = domain;\n  return error;\n}\n/** @internal */\nfunction defaultOnError(error) {\n  throw error;\n}\n\n// eslint-disable-next-line no-useless-escape\nconst RE_HTML_TAG = /<\\/?[\\w\\s=\"/.':;#-\\/]+>/;\nconst detectHtmlTag = source => RE_HTML_TAG.test(source);\nconst CHAR_SP = ' ';\nconst CHAR_CR = '\\r';\nconst CHAR_LF = '\\n';\nconst CHAR_LS = String.fromCharCode(0x2028);\nconst CHAR_PS = String.fromCharCode(0x2029);\nfunction createScanner(str) {\n  const _buf = str;\n  let _index = 0;\n  let _line = 1;\n  let _column = 1;\n  let _peekOffset = 0;\n  const isCRLF = index => _buf[index] === CHAR_CR && _buf[index + 1] === CHAR_LF;\n  const isLF = index => _buf[index] === CHAR_LF;\n  const isPS = index => _buf[index] === CHAR_PS;\n  const isLS = index => _buf[index] === CHAR_LS;\n  const isLineEnd = index => isCRLF(index) || isLF(index) || isPS(index) || isLS(index);\n  const index = () => _index;\n  const line = () => _line;\n  const column = () => _column;\n  const peekOffset = () => _peekOffset;\n  const charAt = offset => isCRLF(offset) || isPS(offset) || isLS(offset) ? CHAR_LF : _buf[offset];\n  const currentChar = () => charAt(_index);\n  const currentPeek = () => charAt(_index + _peekOffset);\n  function next() {\n    _peekOffset = 0;\n    if (isLineEnd(_index)) {\n      _line++;\n      _column = 0;\n    }\n    if (isCRLF(_index)) {\n      _index++;\n    }\n    _index++;\n    _column++;\n    return _buf[_index];\n  }\n  function peek() {\n    if (isCRLF(_index + _peekOffset)) {\n      _peekOffset++;\n    }\n    _peekOffset++;\n    return _buf[_index + _peekOffset];\n  }\n  function reset() {\n    _index = 0;\n    _line = 1;\n    _column = 1;\n    _peekOffset = 0;\n  }\n  function resetPeek(offset = 0) {\n    _peekOffset = offset;\n  }\n  function skipToPeek() {\n    const target = _index + _peekOffset;\n    while (target !== _index) {\n      next();\n    }\n    _peekOffset = 0;\n  }\n  return {\n    index,\n    line,\n    column,\n    peekOffset,\n    charAt,\n    currentChar,\n    currentPeek,\n    next,\n    peek,\n    reset,\n    resetPeek,\n    skipToPeek\n  };\n}\nconst EOF = undefined;\nconst DOT = '.';\nconst LITERAL_DELIMITER = \"'\";\nconst ERROR_DOMAIN$3 = 'tokenizer';\nfunction createTokenizer(source, options = {}) {\n  const location = options.location !== false;\n  const _scnr = createScanner(source);\n  const currentOffset = () => _scnr.index();\n  const currentPosition = () => createPosition(_scnr.line(), _scnr.column(), _scnr.index());\n  const _initLoc = currentPosition();\n  const _initOffset = currentOffset();\n  const _context = {\n    currentType: 13 /* TokenTypes.EOF */,\n    offset: _initOffset,\n    startLoc: _initLoc,\n    endLoc: _initLoc,\n    lastType: 13 /* TokenTypes.EOF */,\n    lastOffset: _initOffset,\n    lastStartLoc: _initLoc,\n    lastEndLoc: _initLoc,\n    braceNest: 0,\n    inLinked: false,\n    text: ''\n  };\n  const context = () => _context;\n  const {\n    onError\n  } = options;\n  function emitError(code, pos, offset, ...args) {\n    const ctx = context();\n    pos.column += offset;\n    pos.offset += offset;\n    if (onError) {\n      const loc = location ? createLocation(ctx.startLoc, pos) : null;\n      const err = createCompileError(code, loc, {\n        domain: ERROR_DOMAIN$3,\n        args\n      });\n      onError(err);\n    }\n  }\n  function getToken(context, type, value) {\n    context.endLoc = currentPosition();\n    context.currentType = type;\n    const token = {\n      type\n    };\n    if (location) {\n      token.loc = createLocation(context.startLoc, context.endLoc);\n    }\n    if (value != null) {\n      token.value = value;\n    }\n    return token;\n  }\n  const getEndToken = context => getToken(context, 13 /* TokenTypes.EOF */);\n  function eat(scnr, ch) {\n    if (scnr.currentChar() === ch) {\n      scnr.next();\n      return ch;\n    } else {\n      emitError(CompileErrorCodes.EXPECTED_TOKEN, currentPosition(), 0, ch);\n      return '';\n    }\n  }\n  function peekSpaces(scnr) {\n    let buf = '';\n    while (scnr.currentPeek() === CHAR_SP || scnr.currentPeek() === CHAR_LF) {\n      buf += scnr.currentPeek();\n      scnr.peek();\n    }\n    return buf;\n  }\n  function skipSpaces(scnr) {\n    const buf = peekSpaces(scnr);\n    scnr.skipToPeek();\n    return buf;\n  }\n  function isIdentifierStart(ch) {\n    if (ch === EOF) {\n      return false;\n    }\n    const cc = ch.charCodeAt(0);\n    return cc >= 97 && cc <= 122 ||\n    // a-z\n    cc >= 65 && cc <= 90 ||\n    // A-Z\n    cc === 95 // _\n    ;\n  }\n  function isNumberStart(ch) {\n    if (ch === EOF) {\n      return false;\n    }\n    const cc = ch.charCodeAt(0);\n    return cc >= 48 && cc <= 57; // 0-9\n  }\n  function isNamedIdentifierStart(scnr, context) {\n    const {\n      currentType\n    } = context;\n    if (currentType !== 2 /* TokenTypes.BraceLeft */) {\n      return false;\n    }\n    peekSpaces(scnr);\n    const ret = isIdentifierStart(scnr.currentPeek());\n    scnr.resetPeek();\n    return ret;\n  }\n  function isListIdentifierStart(scnr, context) {\n    const {\n      currentType\n    } = context;\n    if (currentType !== 2 /* TokenTypes.BraceLeft */) {\n      return false;\n    }\n    peekSpaces(scnr);\n    const ch = scnr.currentPeek() === '-' ? scnr.peek() : scnr.currentPeek();\n    const ret = isNumberStart(ch);\n    scnr.resetPeek();\n    return ret;\n  }\n  function isLiteralStart(scnr, context) {\n    const {\n      currentType\n    } = context;\n    if (currentType !== 2 /* TokenTypes.BraceLeft */) {\n      return false;\n    }\n    peekSpaces(scnr);\n    const ret = scnr.currentPeek() === LITERAL_DELIMITER;\n    scnr.resetPeek();\n    return ret;\n  }\n  function isLinkedDotStart(scnr, context) {\n    const {\n      currentType\n    } = context;\n    if (currentType !== 7 /* TokenTypes.LinkedAlias */) {\n      return false;\n    }\n    peekSpaces(scnr);\n    const ret = scnr.currentPeek() === \".\" /* TokenChars.LinkedDot */;\n    scnr.resetPeek();\n    return ret;\n  }\n  function isLinkedModifierStart(scnr, context) {\n    const {\n      currentType\n    } = context;\n    if (currentType !== 8 /* TokenTypes.LinkedDot */) {\n      return false;\n    }\n    peekSpaces(scnr);\n    const ret = isIdentifierStart(scnr.currentPeek());\n    scnr.resetPeek();\n    return ret;\n  }\n  function isLinkedDelimiterStart(scnr, context) {\n    const {\n      currentType\n    } = context;\n    if (!(currentType === 7 /* TokenTypes.LinkedAlias */ || currentType === 11 /* TokenTypes.LinkedModifier */)) {\n      return false;\n    }\n    peekSpaces(scnr);\n    const ret = scnr.currentPeek() === \":\" /* TokenChars.LinkedDelimiter */;\n    scnr.resetPeek();\n    return ret;\n  }\n  function isLinkedReferStart(scnr, context) {\n    const {\n      currentType\n    } = context;\n    if (currentType !== 9 /* TokenTypes.LinkedDelimiter */) {\n      return false;\n    }\n    const fn = () => {\n      const ch = scnr.currentPeek();\n      if (ch === \"{\" /* TokenChars.BraceLeft */) {\n        return isIdentifierStart(scnr.peek());\n      } else if (ch === \"@\" /* TokenChars.LinkedAlias */ || ch === \"|\" /* TokenChars.Pipe */ || ch === \":\" /* TokenChars.LinkedDelimiter */ || ch === \".\" /* TokenChars.LinkedDot */ || ch === CHAR_SP || !ch) {\n        return false;\n      } else if (ch === CHAR_LF) {\n        scnr.peek();\n        return fn();\n      } else {\n        // other characters\n        return isTextStart(scnr, false);\n      }\n    };\n    const ret = fn();\n    scnr.resetPeek();\n    return ret;\n  }\n  function isPluralStart(scnr) {\n    peekSpaces(scnr);\n    const ret = scnr.currentPeek() === \"|\" /* TokenChars.Pipe */;\n    scnr.resetPeek();\n    return ret;\n  }\n  function isTextStart(scnr, reset = true) {\n    const fn = (hasSpace = false, prev = '') => {\n      const ch = scnr.currentPeek();\n      if (ch === \"{\" /* TokenChars.BraceLeft */) {\n        return hasSpace;\n      } else if (ch === \"@\" /* TokenChars.LinkedAlias */ || !ch) {\n        return hasSpace;\n      } else if (ch === \"|\" /* TokenChars.Pipe */) {\n        return !(prev === CHAR_SP || prev === CHAR_LF);\n      } else if (ch === CHAR_SP) {\n        scnr.peek();\n        return fn(true, CHAR_SP);\n      } else if (ch === CHAR_LF) {\n        scnr.peek();\n        return fn(true, CHAR_LF);\n      } else {\n        return true;\n      }\n    };\n    const ret = fn();\n    reset && scnr.resetPeek();\n    return ret;\n  }\n  function takeChar(scnr, fn) {\n    const ch = scnr.currentChar();\n    if (ch === EOF) {\n      return EOF;\n    }\n    if (fn(ch)) {\n      scnr.next();\n      return ch;\n    }\n    return null;\n  }\n  function isIdentifier(ch) {\n    const cc = ch.charCodeAt(0);\n    return cc >= 97 && cc <= 122 ||\n    // a-z\n    cc >= 65 && cc <= 90 ||\n    // A-Z\n    cc >= 48 && cc <= 57 ||\n    // 0-9\n    cc === 95 ||\n    // _\n    cc === 36 // $\n    ;\n  }\n  function takeIdentifierChar(scnr) {\n    return takeChar(scnr, isIdentifier);\n  }\n  function isNamedIdentifier(ch) {\n    const cc = ch.charCodeAt(0);\n    return cc >= 97 && cc <= 122 ||\n    // a-z\n    cc >= 65 && cc <= 90 ||\n    // A-Z\n    cc >= 48 && cc <= 57 ||\n    // 0-9\n    cc === 95 ||\n    // _\n    cc === 36 ||\n    // $\n    cc === 45 // -\n    ;\n  }\n  function takeNamedIdentifierChar(scnr) {\n    return takeChar(scnr, isNamedIdentifier);\n  }\n  function isDigit(ch) {\n    const cc = ch.charCodeAt(0);\n    return cc >= 48 && cc <= 57; // 0-9\n  }\n  function takeDigit(scnr) {\n    return takeChar(scnr, isDigit);\n  }\n  function isHexDigit(ch) {\n    const cc = ch.charCodeAt(0);\n    return cc >= 48 && cc <= 57 ||\n    // 0-9\n    cc >= 65 && cc <= 70 ||\n    // A-F\n    cc >= 97 && cc <= 102; // a-f\n  }\n  function takeHexDigit(scnr) {\n    return takeChar(scnr, isHexDigit);\n  }\n  function getDigits(scnr) {\n    let ch = '';\n    let num = '';\n    while (ch = takeDigit(scnr)) {\n      num += ch;\n    }\n    return num;\n  }\n  function readText(scnr) {\n    let buf = '';\n    while (true) {\n      const ch = scnr.currentChar();\n      if (ch === \"{\" /* TokenChars.BraceLeft */ || ch === \"}\" /* TokenChars.BraceRight */ || ch === \"@\" /* TokenChars.LinkedAlias */ || ch === \"|\" /* TokenChars.Pipe */ || !ch) {\n        break;\n      } else if (ch === CHAR_SP || ch === CHAR_LF) {\n        if (isTextStart(scnr)) {\n          buf += ch;\n          scnr.next();\n        } else if (isPluralStart(scnr)) {\n          break;\n        } else {\n          buf += ch;\n          scnr.next();\n        }\n      } else {\n        buf += ch;\n        scnr.next();\n      }\n    }\n    return buf;\n  }\n  function readNamedIdentifier(scnr) {\n    skipSpaces(scnr);\n    let ch = '';\n    let name = '';\n    while (ch = takeNamedIdentifierChar(scnr)) {\n      name += ch;\n    }\n    if (scnr.currentChar() === EOF) {\n      emitError(CompileErrorCodes.UNTERMINATED_CLOSING_BRACE, currentPosition(), 0);\n    }\n    return name;\n  }\n  function readListIdentifier(scnr) {\n    skipSpaces(scnr);\n    let value = '';\n    if (scnr.currentChar() === '-') {\n      scnr.next();\n      value += `-${getDigits(scnr)}`;\n    } else {\n      value += getDigits(scnr);\n    }\n    if (scnr.currentChar() === EOF) {\n      emitError(CompileErrorCodes.UNTERMINATED_CLOSING_BRACE, currentPosition(), 0);\n    }\n    return value;\n  }\n  function isLiteral(ch) {\n    return ch !== LITERAL_DELIMITER && ch !== CHAR_LF;\n  }\n  function readLiteral(scnr) {\n    skipSpaces(scnr);\n    // eslint-disable-next-line no-useless-escape\n    eat(scnr, `\\'`);\n    let ch = '';\n    let literal = '';\n    while (ch = takeChar(scnr, isLiteral)) {\n      if (ch === '\\\\') {\n        literal += readEscapeSequence(scnr);\n      } else {\n        literal += ch;\n      }\n    }\n    const current = scnr.currentChar();\n    if (current === CHAR_LF || current === EOF) {\n      emitError(CompileErrorCodes.UNTERMINATED_SINGLE_QUOTE_IN_PLACEHOLDER, currentPosition(), 0);\n      // TODO: Is it correct really?\n      if (current === CHAR_LF) {\n        scnr.next();\n        // eslint-disable-next-line no-useless-escape\n        eat(scnr, `\\'`);\n      }\n      return literal;\n    }\n    // eslint-disable-next-line no-useless-escape\n    eat(scnr, `\\'`);\n    return literal;\n  }\n  function readEscapeSequence(scnr) {\n    const ch = scnr.currentChar();\n    switch (ch) {\n      case '\\\\':\n      case `\\'`:\n        // eslint-disable-line no-useless-escape\n        scnr.next();\n        return `\\\\${ch}`;\n      case 'u':\n        return readUnicodeEscapeSequence(scnr, ch, 4);\n      case 'U':\n        return readUnicodeEscapeSequence(scnr, ch, 6);\n      default:\n        emitError(CompileErrorCodes.UNKNOWN_ESCAPE_SEQUENCE, currentPosition(), 0, ch);\n        return '';\n    }\n  }\n  function readUnicodeEscapeSequence(scnr, unicode, digits) {\n    eat(scnr, unicode);\n    let sequence = '';\n    for (let i = 0; i < digits; i++) {\n      const ch = takeHexDigit(scnr);\n      if (!ch) {\n        emitError(CompileErrorCodes.INVALID_UNICODE_ESCAPE_SEQUENCE, currentPosition(), 0, `\\\\${unicode}${sequence}${scnr.currentChar()}`);\n        break;\n      }\n      sequence += ch;\n    }\n    return `\\\\${unicode}${sequence}`;\n  }\n  function isInvalidIdentifier(ch) {\n    return ch !== \"{\" /* TokenChars.BraceLeft */ && ch !== \"}\" /* TokenChars.BraceRight */ && ch !== CHAR_SP && ch !== CHAR_LF;\n  }\n  function readInvalidIdentifier(scnr) {\n    skipSpaces(scnr);\n    let ch = '';\n    let identifiers = '';\n    while (ch = takeChar(scnr, isInvalidIdentifier)) {\n      identifiers += ch;\n    }\n    return identifiers;\n  }\n  function readLinkedModifier(scnr) {\n    let ch = '';\n    let name = '';\n    while (ch = takeIdentifierChar(scnr)) {\n      name += ch;\n    }\n    return name;\n  }\n  function readLinkedRefer(scnr) {\n    const fn = buf => {\n      const ch = scnr.currentChar();\n      if (ch === \"{\" /* TokenChars.BraceLeft */ || ch === \"@\" /* TokenChars.LinkedAlias */ || ch === \"|\" /* TokenChars.Pipe */ || ch === \"(\" /* TokenChars.ParenLeft */ || ch === \")\" /* TokenChars.ParenRight */ || !ch) {\n        return buf;\n      } else if (ch === CHAR_SP) {\n        return buf;\n      } else if (ch === CHAR_LF || ch === DOT) {\n        buf += ch;\n        scnr.next();\n        return fn(buf);\n      } else {\n        buf += ch;\n        scnr.next();\n        return fn(buf);\n      }\n    };\n    return fn('');\n  }\n  function readPlural(scnr) {\n    skipSpaces(scnr);\n    const plural = eat(scnr, \"|\" /* TokenChars.Pipe */);\n    skipSpaces(scnr);\n    return plural;\n  }\n  // TODO: We need refactoring of token parsing ...\n  function readTokenInPlaceholder(scnr, context) {\n    let token = null;\n    const ch = scnr.currentChar();\n    switch (ch) {\n      case \"{\" /* TokenChars.BraceLeft */:\n        if (context.braceNest >= 1) {\n          emitError(CompileErrorCodes.NOT_ALLOW_NEST_PLACEHOLDER, currentPosition(), 0);\n        }\n        scnr.next();\n        token = getToken(context, 2 /* TokenTypes.BraceLeft */, \"{\" /* TokenChars.BraceLeft */);\n        skipSpaces(scnr);\n        context.braceNest++;\n        return token;\n      case \"}\" /* TokenChars.BraceRight */:\n        if (context.braceNest > 0 && context.currentType === 2 /* TokenTypes.BraceLeft */) {\n          emitError(CompileErrorCodes.EMPTY_PLACEHOLDER, currentPosition(), 0);\n        }\n        scnr.next();\n        token = getToken(context, 3 /* TokenTypes.BraceRight */, \"}\" /* TokenChars.BraceRight */);\n        context.braceNest--;\n        context.braceNest > 0 && skipSpaces(scnr);\n        if (context.inLinked && context.braceNest === 0) {\n          context.inLinked = false;\n        }\n        return token;\n      case \"@\" /* TokenChars.LinkedAlias */:\n        if (context.braceNest > 0) {\n          emitError(CompileErrorCodes.UNTERMINATED_CLOSING_BRACE, currentPosition(), 0);\n        }\n        token = readTokenInLinked(scnr, context) || getEndToken(context);\n        context.braceNest = 0;\n        return token;\n      default:\n        {\n          let validNamedIdentifier = true;\n          let validListIdentifier = true;\n          let validLiteral = true;\n          if (isPluralStart(scnr)) {\n            if (context.braceNest > 0) {\n              emitError(CompileErrorCodes.UNTERMINATED_CLOSING_BRACE, currentPosition(), 0);\n            }\n            token = getToken(context, 1 /* TokenTypes.Pipe */, readPlural(scnr));\n            // reset\n            context.braceNest = 0;\n            context.inLinked = false;\n            return token;\n          }\n          if (context.braceNest > 0 && (context.currentType === 4 /* TokenTypes.Named */ || context.currentType === 5 /* TokenTypes.List */ || context.currentType === 6 /* TokenTypes.Literal */)) {\n            emitError(CompileErrorCodes.UNTERMINATED_CLOSING_BRACE, currentPosition(), 0);\n            context.braceNest = 0;\n            return readToken(scnr, context);\n          }\n          if (validNamedIdentifier = isNamedIdentifierStart(scnr, context)) {\n            token = getToken(context, 4 /* TokenTypes.Named */, readNamedIdentifier(scnr));\n            skipSpaces(scnr);\n            return token;\n          }\n          if (validListIdentifier = isListIdentifierStart(scnr, context)) {\n            token = getToken(context, 5 /* TokenTypes.List */, readListIdentifier(scnr));\n            skipSpaces(scnr);\n            return token;\n          }\n          if (validLiteral = isLiteralStart(scnr, context)) {\n            token = getToken(context, 6 /* TokenTypes.Literal */, readLiteral(scnr));\n            skipSpaces(scnr);\n            return token;\n          }\n          if (!validNamedIdentifier && !validListIdentifier && !validLiteral) {\n            // TODO: we should be re-designed invalid cases, when we will extend message syntax near the future ...\n            token = getToken(context, 12 /* TokenTypes.InvalidPlace */, readInvalidIdentifier(scnr));\n            emitError(CompileErrorCodes.INVALID_TOKEN_IN_PLACEHOLDER, currentPosition(), 0, token.value);\n            skipSpaces(scnr);\n            return token;\n          }\n          break;\n        }\n    }\n    return token;\n  }\n  // TODO: We need refactoring of token parsing ...\n  function readTokenInLinked(scnr, context) {\n    const {\n      currentType\n    } = context;\n    let token = null;\n    const ch = scnr.currentChar();\n    if ((currentType === 7 /* TokenTypes.LinkedAlias */ || currentType === 8 /* TokenTypes.LinkedDot */ || currentType === 11 /* TokenTypes.LinkedModifier */ || currentType === 9 /* TokenTypes.LinkedDelimiter */) && (ch === CHAR_LF || ch === CHAR_SP)) {\n      emitError(CompileErrorCodes.INVALID_LINKED_FORMAT, currentPosition(), 0);\n    }\n    switch (ch) {\n      case \"@\" /* TokenChars.LinkedAlias */:\n        scnr.next();\n        token = getToken(context, 7 /* TokenTypes.LinkedAlias */, \"@\" /* TokenChars.LinkedAlias */);\n        context.inLinked = true;\n        return token;\n      case \".\" /* TokenChars.LinkedDot */:\n        skipSpaces(scnr);\n        scnr.next();\n        return getToken(context, 8 /* TokenTypes.LinkedDot */, \".\" /* TokenChars.LinkedDot */);\n      case \":\" /* TokenChars.LinkedDelimiter */:\n        skipSpaces(scnr);\n        scnr.next();\n        return getToken(context, 9 /* TokenTypes.LinkedDelimiter */, \":\" /* TokenChars.LinkedDelimiter */);\n      default:\n        if (isPluralStart(scnr)) {\n          token = getToken(context, 1 /* TokenTypes.Pipe */, readPlural(scnr));\n          // reset\n          context.braceNest = 0;\n          context.inLinked = false;\n          return token;\n        }\n        if (isLinkedDotStart(scnr, context) || isLinkedDelimiterStart(scnr, context)) {\n          skipSpaces(scnr);\n          return readTokenInLinked(scnr, context);\n        }\n        if (isLinkedModifierStart(scnr, context)) {\n          skipSpaces(scnr);\n          return getToken(context, 11 /* TokenTypes.LinkedModifier */, readLinkedModifier(scnr));\n        }\n        if (isLinkedReferStart(scnr, context)) {\n          skipSpaces(scnr);\n          if (ch === \"{\" /* TokenChars.BraceLeft */) {\n            // scan the placeholder\n            return readTokenInPlaceholder(scnr, context) || token;\n          } else {\n            return getToken(context, 10 /* TokenTypes.LinkedKey */, readLinkedRefer(scnr));\n          }\n        }\n        if (currentType === 7 /* TokenTypes.LinkedAlias */) {\n          emitError(CompileErrorCodes.INVALID_LINKED_FORMAT, currentPosition(), 0);\n        }\n        context.braceNest = 0;\n        context.inLinked = false;\n        return readToken(scnr, context);\n    }\n  }\n  // TODO: We need refactoring of token parsing ...\n  function readToken(scnr, context) {\n    let token = {\n      type: 13 /* TokenTypes.EOF */\n    };\n    if (context.braceNest > 0) {\n      return readTokenInPlaceholder(scnr, context) || getEndToken(context);\n    }\n    if (context.inLinked) {\n      return readTokenInLinked(scnr, context) || getEndToken(context);\n    }\n    const ch = scnr.currentChar();\n    switch (ch) {\n      case \"{\" /* TokenChars.BraceLeft */:\n        return readTokenInPlaceholder(scnr, context) || getEndToken(context);\n      case \"}\" /* TokenChars.BraceRight */:\n        emitError(CompileErrorCodes.UNBALANCED_CLOSING_BRACE, currentPosition(), 0);\n        scnr.next();\n        return getToken(context, 3 /* TokenTypes.BraceRight */, \"}\" /* TokenChars.BraceRight */);\n      case \"@\" /* TokenChars.LinkedAlias */:\n        return readTokenInLinked(scnr, context) || getEndToken(context);\n      default:\n        {\n          if (isPluralStart(scnr)) {\n            token = getToken(context, 1 /* TokenTypes.Pipe */, readPlural(scnr));\n            // reset\n            context.braceNest = 0;\n            context.inLinked = false;\n            return token;\n          }\n          if (isTextStart(scnr)) {\n            return getToken(context, 0 /* TokenTypes.Text */, readText(scnr));\n          }\n          break;\n        }\n    }\n    return token;\n  }\n  function nextToken() {\n    const {\n      currentType,\n      offset,\n      startLoc,\n      endLoc\n    } = _context;\n    _context.lastType = currentType;\n    _context.lastOffset = offset;\n    _context.lastStartLoc = startLoc;\n    _context.lastEndLoc = endLoc;\n    _context.offset = currentOffset();\n    _context.startLoc = currentPosition();\n    if (_scnr.currentChar() === EOF) {\n      return getToken(_context, 13 /* TokenTypes.EOF */);\n    }\n    return readToken(_scnr, _context);\n  }\n  return {\n    nextToken,\n    currentOffset,\n    currentPosition,\n    context\n  };\n}\nconst ERROR_DOMAIN$2 = 'parser';\n// Backslash backslash, backslash quote, uHHHH, UHHHHHH.\nconst KNOWN_ESCAPES = /(?:\\\\\\\\|\\\\'|\\\\u([0-9a-fA-F]{4})|\\\\U([0-9a-fA-F]{6}))/g;\nfunction fromEscapeSequence(match, codePoint4, codePoint6) {\n  switch (match) {\n    case `\\\\\\\\`:\n      return `\\\\`;\n    // eslint-disable-next-line no-useless-escape\n    case `\\\\\\'`:\n      // eslint-disable-next-line no-useless-escape\n      return `\\'`;\n    default:\n      {\n        const codePoint = parseInt(codePoint4 || codePoint6, 16);\n        if (codePoint <= 0xd7ff || codePoint >= 0xe000) {\n          return String.fromCodePoint(codePoint);\n        }\n        // invalid ...\n        // Replace them with U+FFFD REPLACEMENT CHARACTER.\n        return '�';\n      }\n  }\n}\nfunction createParser(options = {}) {\n  const location = options.location !== false;\n  const {\n    onError\n  } = options;\n  function emitError(tokenzer, code, start, offset, ...args) {\n    const end = tokenzer.currentPosition();\n    end.offset += offset;\n    end.column += offset;\n    if (onError) {\n      const loc = location ? createLocation(start, end) : null;\n      const err = createCompileError(code, loc, {\n        domain: ERROR_DOMAIN$2,\n        args\n      });\n      onError(err);\n    }\n  }\n  function startNode(type, offset, loc) {\n    const node = {\n      type\n    };\n    if (location) {\n      node.start = offset;\n      node.end = offset;\n      node.loc = {\n        start: loc,\n        end: loc\n      };\n    }\n    return node;\n  }\n  function endNode(node, offset, pos, type) {\n    if (type) {\n      node.type = type;\n    }\n    if (location) {\n      node.end = offset;\n      if (node.loc) {\n        node.loc.end = pos;\n      }\n    }\n  }\n  function parseText(tokenizer, value) {\n    const context = tokenizer.context();\n    const node = startNode(3 /* NodeTypes.Text */, context.offset, context.startLoc);\n    node.value = value;\n    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n    return node;\n  }\n  function parseList(tokenizer, index) {\n    const context = tokenizer.context();\n    const {\n      lastOffset: offset,\n      lastStartLoc: loc\n    } = context; // get brace left loc\n    const node = startNode(5 /* NodeTypes.List */, offset, loc);\n    node.index = parseInt(index, 10);\n    tokenizer.nextToken(); // skip brach right\n    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n    return node;\n  }\n  function parseNamed(tokenizer, key) {\n    const context = tokenizer.context();\n    const {\n      lastOffset: offset,\n      lastStartLoc: loc\n    } = context; // get brace left loc\n    const node = startNode(4 /* NodeTypes.Named */, offset, loc);\n    node.key = key;\n    tokenizer.nextToken(); // skip brach right\n    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n    return node;\n  }\n  function parseLiteral(tokenizer, value) {\n    const context = tokenizer.context();\n    const {\n      lastOffset: offset,\n      lastStartLoc: loc\n    } = context; // get brace left loc\n    const node = startNode(9 /* NodeTypes.Literal */, offset, loc);\n    node.value = value.replace(KNOWN_ESCAPES, fromEscapeSequence);\n    tokenizer.nextToken(); // skip brach right\n    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n    return node;\n  }\n  function parseLinkedModifier(tokenizer) {\n    const token = tokenizer.nextToken();\n    const context = tokenizer.context();\n    const {\n      lastOffset: offset,\n      lastStartLoc: loc\n    } = context; // get linked dot loc\n    const node = startNode(8 /* NodeTypes.LinkedModifier */, offset, loc);\n    if (token.type !== 11 /* TokenTypes.LinkedModifier */) {\n      // empty modifier\n      emitError(tokenizer, CompileErrorCodes.UNEXPECTED_EMPTY_LINKED_MODIFIER, context.lastStartLoc, 0);\n      node.value = '';\n      endNode(node, offset, loc);\n      return {\n        nextConsumeToken: token,\n        node\n      };\n    }\n    // check token\n    if (token.value == null) {\n      emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n    }\n    node.value = token.value || '';\n    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n    return {\n      node\n    };\n  }\n  function parseLinkedKey(tokenizer, value) {\n    const context = tokenizer.context();\n    const node = startNode(7 /* NodeTypes.LinkedKey */, context.offset, context.startLoc);\n    node.value = value;\n    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n    return node;\n  }\n  function parseLinked(tokenizer) {\n    const context = tokenizer.context();\n    const linkedNode = startNode(6 /* NodeTypes.Linked */, context.offset, context.startLoc);\n    let token = tokenizer.nextToken();\n    if (token.type === 8 /* TokenTypes.LinkedDot */) {\n      const parsed = parseLinkedModifier(tokenizer);\n      linkedNode.modifier = parsed.node;\n      token = parsed.nextConsumeToken || tokenizer.nextToken();\n    }\n    // asset check token\n    if (token.type !== 9 /* TokenTypes.LinkedDelimiter */) {\n      emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n    }\n    token = tokenizer.nextToken();\n    // skip brace left\n    if (token.type === 2 /* TokenTypes.BraceLeft */) {\n      token = tokenizer.nextToken();\n    }\n    switch (token.type) {\n      case 10 /* TokenTypes.LinkedKey */:\n        if (token.value == null) {\n          emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n        }\n        linkedNode.key = parseLinkedKey(tokenizer, token.value || '');\n        break;\n      case 4 /* TokenTypes.Named */:\n        if (token.value == null) {\n          emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n        }\n        linkedNode.key = parseNamed(tokenizer, token.value || '');\n        break;\n      case 5 /* TokenTypes.List */:\n        if (token.value == null) {\n          emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n        }\n        linkedNode.key = parseList(tokenizer, token.value || '');\n        break;\n      case 6 /* TokenTypes.Literal */:\n        if (token.value == null) {\n          emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n        }\n        linkedNode.key = parseLiteral(tokenizer, token.value || '');\n        break;\n      default:\n        {\n          // empty key\n          emitError(tokenizer, CompileErrorCodes.UNEXPECTED_EMPTY_LINKED_KEY, context.lastStartLoc, 0);\n          const nextContext = tokenizer.context();\n          const emptyLinkedKeyNode = startNode(7 /* NodeTypes.LinkedKey */, nextContext.offset, nextContext.startLoc);\n          emptyLinkedKeyNode.value = '';\n          endNode(emptyLinkedKeyNode, nextContext.offset, nextContext.startLoc);\n          linkedNode.key = emptyLinkedKeyNode;\n          endNode(linkedNode, nextContext.offset, nextContext.startLoc);\n          return {\n            nextConsumeToken: token,\n            node: linkedNode\n          };\n        }\n    }\n    endNode(linkedNode, tokenizer.currentOffset(), tokenizer.currentPosition());\n    return {\n      node: linkedNode\n    };\n  }\n  function parseMessage(tokenizer) {\n    const context = tokenizer.context();\n    const startOffset = context.currentType === 1 /* TokenTypes.Pipe */ ? tokenizer.currentOffset() : context.offset;\n    const startLoc = context.currentType === 1 /* TokenTypes.Pipe */ ? context.endLoc : context.startLoc;\n    const node = startNode(2 /* NodeTypes.Message */, startOffset, startLoc);\n    node.items = [];\n    let nextToken = null;\n    do {\n      const token = nextToken || tokenizer.nextToken();\n      nextToken = null;\n      switch (token.type) {\n        case 0 /* TokenTypes.Text */:\n          if (token.value == null) {\n            emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n          }\n          node.items.push(parseText(tokenizer, token.value || ''));\n          break;\n        case 5 /* TokenTypes.List */:\n          if (token.value == null) {\n            emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n          }\n          node.items.push(parseList(tokenizer, token.value || ''));\n          break;\n        case 4 /* TokenTypes.Named */:\n          if (token.value == null) {\n            emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n          }\n          node.items.push(parseNamed(tokenizer, token.value || ''));\n          break;\n        case 6 /* TokenTypes.Literal */:\n          if (token.value == null) {\n            emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n          }\n          node.items.push(parseLiteral(tokenizer, token.value || ''));\n          break;\n        case 7 /* TokenTypes.LinkedAlias */:\n          {\n            const parsed = parseLinked(tokenizer);\n            node.items.push(parsed.node);\n            nextToken = parsed.nextConsumeToken || null;\n            break;\n          }\n      }\n    } while (context.currentType !== 13 /* TokenTypes.EOF */ && context.currentType !== 1 /* TokenTypes.Pipe */);\n    // adjust message node loc\n    const endOffset = context.currentType === 1 /* TokenTypes.Pipe */ ? context.lastOffset : tokenizer.currentOffset();\n    const endLoc = context.currentType === 1 /* TokenTypes.Pipe */ ? context.lastEndLoc : tokenizer.currentPosition();\n    endNode(node, endOffset, endLoc);\n    return node;\n  }\n  function parsePlural(tokenizer, offset, loc, msgNode) {\n    const context = tokenizer.context();\n    let hasEmptyMessage = msgNode.items.length === 0;\n    const node = startNode(1 /* NodeTypes.Plural */, offset, loc);\n    node.cases = [];\n    node.cases.push(msgNode);\n    do {\n      const msg = parseMessage(tokenizer);\n      if (!hasEmptyMessage) {\n        hasEmptyMessage = msg.items.length === 0;\n      }\n      node.cases.push(msg);\n    } while (context.currentType !== 13 /* TokenTypes.EOF */);\n    if (hasEmptyMessage) {\n      emitError(tokenizer, CompileErrorCodes.MUST_HAVE_MESSAGES_IN_PLURAL, loc, 0);\n    }\n    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n    return node;\n  }\n  function parseResource(tokenizer) {\n    const context = tokenizer.context();\n    const {\n      offset,\n      startLoc\n    } = context;\n    const msgNode = parseMessage(tokenizer);\n    if (context.currentType === 13 /* TokenTypes.EOF */) {\n      return msgNode;\n    } else {\n      return parsePlural(tokenizer, offset, startLoc, msgNode);\n    }\n  }\n  function parse(source) {\n    const tokenizer = createTokenizer(source, assign({}, options));\n    const context = tokenizer.context();\n    const node = startNode(0 /* NodeTypes.Resource */, context.offset, context.startLoc);\n    if (location && node.loc) {\n      node.loc.source = source;\n    }\n    node.body = parseResource(tokenizer);\n    if (options.onCacheKey) {\n      node.cacheKey = options.onCacheKey(source);\n    }\n    // assert whether achieved to EOF\n    if (context.currentType !== 13 /* TokenTypes.EOF */) {\n      emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, source[context.offset] || '');\n    }\n    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n    return node;\n  }\n  return {\n    parse\n  };\n}\nfunction getTokenCaption(token) {\n  if (token.type === 13 /* TokenTypes.EOF */) {\n    return 'EOF';\n  }\n  const name = (token.value || '').replace(/\\r?\\n/gu, '\\\\n');\n  return name.length > 10 ? name.slice(0, 9) + '…' : name;\n}\nfunction createTransformer(ast, options = {} // eslint-disable-line\n) {\n  const _context = {\n    ast,\n    helpers: new Set()\n  };\n  const context = () => _context;\n  const helper = name => {\n    _context.helpers.add(name);\n    return name;\n  };\n  return {\n    context,\n    helper\n  };\n}\nfunction traverseNodes(nodes, transformer) {\n  for (let i = 0; i < nodes.length; i++) {\n    traverseNode(nodes[i], transformer);\n  }\n}\nfunction traverseNode(node, transformer) {\n  // TODO: if we need pre-hook of transform, should be implemented to here\n  switch (node.type) {\n    case 1 /* NodeTypes.Plural */:\n      traverseNodes(node.cases, transformer);\n      transformer.helper(\"plural\" /* HelperNameMap.PLURAL */);\n      break;\n    case 2 /* NodeTypes.Message */:\n      traverseNodes(node.items, transformer);\n      break;\n    case 6 /* NodeTypes.Linked */:\n      {\n        const linked = node;\n        traverseNode(linked.key, transformer);\n        transformer.helper(\"linked\" /* HelperNameMap.LINKED */);\n        transformer.helper(\"type\" /* HelperNameMap.TYPE */);\n        break;\n      }\n    case 5 /* NodeTypes.List */:\n      transformer.helper(\"interpolate\" /* HelperNameMap.INTERPOLATE */);\n      transformer.helper(\"list\" /* HelperNameMap.LIST */);\n      break;\n    case 4 /* NodeTypes.Named */:\n      transformer.helper(\"interpolate\" /* HelperNameMap.INTERPOLATE */);\n      transformer.helper(\"named\" /* HelperNameMap.NAMED */);\n      break;\n  }\n  // TODO: if we need post-hook of transform, should be implemented to here\n}\n// transform AST\nfunction transform(ast, options = {} // eslint-disable-line\n) {\n  const transformer = createTransformer(ast);\n  transformer.helper(\"normalize\" /* HelperNameMap.NORMALIZE */);\n  // traverse\n  ast.body && traverseNode(ast.body, transformer);\n  // set meta information\n  const context = transformer.context();\n  ast.helpers = Array.from(context.helpers);\n}\nfunction optimize(ast) {\n  const body = ast.body;\n  if (body.type === 2 /* NodeTypes.Message */) {\n    optimizeMessageNode(body);\n  } else {\n    body.cases.forEach(c => optimizeMessageNode(c));\n  }\n  return ast;\n}\nfunction optimizeMessageNode(message) {\n  if (message.items.length === 1) {\n    const item = message.items[0];\n    if (item.type === 3 /* NodeTypes.Text */ || item.type === 9 /* NodeTypes.Literal */) {\n      message.static = item.value;\n      delete item.value; // optimization for size\n    }\n  } else {\n    const values = [];\n    for (let i = 0; i < message.items.length; i++) {\n      const item = message.items[i];\n      if (!(item.type === 3 /* NodeTypes.Text */ || item.type === 9 /* NodeTypes.Literal */)) {\n        break;\n      }\n      if (item.value == null) {\n        break;\n      }\n      values.push(item.value);\n    }\n    if (values.length === message.items.length) {\n      message.static = join(values);\n      for (let i = 0; i < message.items.length; i++) {\n        const item = message.items[i];\n        if (item.type === 3 /* NodeTypes.Text */ || item.type === 9 /* NodeTypes.Literal */) {\n          delete item.value; // optimization for size\n        }\n      }\n    }\n  }\n}\nconst ERROR_DOMAIN$1 = 'minifier';\n/* eslint-disable @typescript-eslint/no-explicit-any */\nfunction minify(node) {\n  node.t = node.type;\n  switch (node.type) {\n    case 0 /* NodeTypes.Resource */:\n      {\n        const resource = node;\n        minify(resource.body);\n        resource.b = resource.body;\n        delete resource.body;\n        break;\n      }\n    case 1 /* NodeTypes.Plural */:\n      {\n        const plural = node;\n        const cases = plural.cases;\n        for (let i = 0; i < cases.length; i++) {\n          minify(cases[i]);\n        }\n        plural.c = cases;\n        delete plural.cases;\n        break;\n      }\n    case 2 /* NodeTypes.Message */:\n      {\n        const message = node;\n        const items = message.items;\n        for (let i = 0; i < items.length; i++) {\n          minify(items[i]);\n        }\n        message.i = items;\n        delete message.items;\n        if (message.static) {\n          message.s = message.static;\n          delete message.static;\n        }\n        break;\n      }\n    case 3 /* NodeTypes.Text */:\n    case 9 /* NodeTypes.Literal */:\n    case 8 /* NodeTypes.LinkedModifier */:\n    case 7 /* NodeTypes.LinkedKey */:\n      {\n        const valueNode = node;\n        if (valueNode.value) {\n          valueNode.v = valueNode.value;\n          delete valueNode.value;\n        }\n        break;\n      }\n    case 6 /* NodeTypes.Linked */:\n      {\n        const linked = node;\n        minify(linked.key);\n        linked.k = linked.key;\n        delete linked.key;\n        if (linked.modifier) {\n          minify(linked.modifier);\n          linked.m = linked.modifier;\n          delete linked.modifier;\n        }\n        break;\n      }\n    case 5 /* NodeTypes.List */:\n      {\n        const list = node;\n        list.i = list.index;\n        delete list.index;\n        break;\n      }\n    case 4 /* NodeTypes.Named */:\n      {\n        const named = node;\n        named.k = named.key;\n        delete named.key;\n        break;\n      }\n    default:\n      {\n        throw createCompileError(CompileErrorCodes.UNHANDLED_MINIFIER_NODE_TYPE, null, {\n          domain: ERROR_DOMAIN$1,\n          args: [node.type]\n        });\n      }\n  }\n  delete node.type;\n}\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\n// eslint-disable-next-line @typescript-eslint/triple-slash-reference\n/// <reference types=\"source-map-js\" />\nconst ERROR_DOMAIN = 'parser';\nfunction createCodeGenerator(ast, options) {\n  const {\n    sourceMap,\n    filename,\n    breakLineCode,\n    needIndent: _needIndent\n  } = options;\n  const location = options.location !== false;\n  const _context = {\n    filename,\n    code: '',\n    column: 1,\n    line: 1,\n    offset: 0,\n    map: undefined,\n    breakLineCode,\n    needIndent: _needIndent,\n    indentLevel: 0\n  };\n  if (location && ast.loc) {\n    _context.source = ast.loc.source;\n  }\n  const context = () => _context;\n  function push(code, node) {\n    _context.code += code;\n  }\n  function _newline(n, withBreakLine = true) {\n    const _breakLineCode = withBreakLine ? breakLineCode : '';\n    push(_needIndent ? _breakLineCode + `  `.repeat(n) : _breakLineCode);\n  }\n  function indent(withNewLine = true) {\n    const level = ++_context.indentLevel;\n    withNewLine && _newline(level);\n  }\n  function deindent(withNewLine = true) {\n    const level = --_context.indentLevel;\n    withNewLine && _newline(level);\n  }\n  function newline() {\n    _newline(_context.indentLevel);\n  }\n  const helper = key => `_${key}`;\n  const needIndent = () => _context.needIndent;\n  return {\n    context,\n    push,\n    indent,\n    deindent,\n    newline,\n    helper,\n    needIndent\n  };\n}\nfunction generateLinkedNode(generator, node) {\n  const {\n    helper\n  } = generator;\n  generator.push(`${helper(\"linked\" /* HelperNameMap.LINKED */)}(`);\n  generateNode(generator, node.key);\n  if (node.modifier) {\n    generator.push(`, `);\n    generateNode(generator, node.modifier);\n    generator.push(`, _type`);\n  } else {\n    generator.push(`, undefined, _type`);\n  }\n  generator.push(`)`);\n}\nfunction generateMessageNode(generator, node) {\n  const {\n    helper,\n    needIndent\n  } = generator;\n  generator.push(`${helper(\"normalize\" /* HelperNameMap.NORMALIZE */)}([`);\n  generator.indent(needIndent());\n  const length = node.items.length;\n  for (let i = 0; i < length; i++) {\n    generateNode(generator, node.items[i]);\n    if (i === length - 1) {\n      break;\n    }\n    generator.push(', ');\n  }\n  generator.deindent(needIndent());\n  generator.push('])');\n}\nfunction generatePluralNode(generator, node) {\n  const {\n    helper,\n    needIndent\n  } = generator;\n  if (node.cases.length > 1) {\n    generator.push(`${helper(\"plural\" /* HelperNameMap.PLURAL */)}([`);\n    generator.indent(needIndent());\n    const length = node.cases.length;\n    for (let i = 0; i < length; i++) {\n      generateNode(generator, node.cases[i]);\n      if (i === length - 1) {\n        break;\n      }\n      generator.push(', ');\n    }\n    generator.deindent(needIndent());\n    generator.push(`])`);\n  }\n}\nfunction generateResource(generator, node) {\n  if (node.body) {\n    generateNode(generator, node.body);\n  } else {\n    generator.push('null');\n  }\n}\nfunction generateNode(generator, node) {\n  const {\n    helper\n  } = generator;\n  switch (node.type) {\n    case 0 /* NodeTypes.Resource */:\n      generateResource(generator, node);\n      break;\n    case 1 /* NodeTypes.Plural */:\n      generatePluralNode(generator, node);\n      break;\n    case 2 /* NodeTypes.Message */:\n      generateMessageNode(generator, node);\n      break;\n    case 6 /* NodeTypes.Linked */:\n      generateLinkedNode(generator, node);\n      break;\n    case 8 /* NodeTypes.LinkedModifier */:\n      generator.push(JSON.stringify(node.value), node);\n      break;\n    case 7 /* NodeTypes.LinkedKey */:\n      generator.push(JSON.stringify(node.value), node);\n      break;\n    case 5 /* NodeTypes.List */:\n      generator.push(`${helper(\"interpolate\" /* HelperNameMap.INTERPOLATE */)}(${helper(\"list\" /* HelperNameMap.LIST */)}(${node.index}))`, node);\n      break;\n    case 4 /* NodeTypes.Named */:\n      generator.push(`${helper(\"interpolate\" /* HelperNameMap.INTERPOLATE */)}(${helper(\"named\" /* HelperNameMap.NAMED */)}(${JSON.stringify(node.key)}))`, node);\n      break;\n    case 9 /* NodeTypes.Literal */:\n      generator.push(JSON.stringify(node.value), node);\n      break;\n    case 3 /* NodeTypes.Text */:\n      generator.push(JSON.stringify(node.value), node);\n      break;\n    default:\n      {\n        throw createCompileError(CompileErrorCodes.UNHANDLED_CODEGEN_NODE_TYPE, null, {\n          domain: ERROR_DOMAIN,\n          args: [node.type]\n        });\n      }\n  }\n}\n// generate code from AST\nconst generate = (ast, options = {}) => {\n  const mode = isString(options.mode) ? options.mode : 'normal';\n  const filename = isString(options.filename) ? options.filename : 'message.intl';\n  const sourceMap = !!options.sourceMap;\n  // prettier-ignore\n  const breakLineCode = options.breakLineCode != null ? options.breakLineCode : mode === 'arrow' ? ';' : '\\n';\n  const needIndent = options.needIndent ? options.needIndent : mode !== 'arrow';\n  const helpers = ast.helpers || [];\n  const generator = createCodeGenerator(ast, {\n    mode,\n    filename,\n    sourceMap,\n    breakLineCode,\n    needIndent\n  });\n  generator.push(mode === 'normal' ? `function __msg__ (ctx) {` : `(ctx) => {`);\n  generator.indent(needIndent);\n  if (helpers.length > 0) {\n    generator.push(`const { ${join(helpers.map(s => `${s}: _${s}`), ', ')} } = ctx`);\n    generator.newline();\n  }\n  generator.push(`return `);\n  generateNode(generator, ast);\n  generator.deindent(needIndent);\n  generator.push(`}`);\n  delete ast.helpers;\n  const {\n    code,\n    map\n  } = generator.context();\n  return {\n    ast,\n    code,\n    map: map ? map.toJSON() : undefined // eslint-disable-line @typescript-eslint/no-explicit-any\n  };\n};\nfunction baseCompile(source, options = {}) {\n  const assignedOptions = assign({}, options);\n  const jit = !!assignedOptions.jit;\n  const enalbeMinify = !!assignedOptions.minify;\n  const enambeOptimize = assignedOptions.optimize == null ? true : assignedOptions.optimize;\n  // parse source codes\n  const parser = createParser(assignedOptions);\n  const ast = parser.parse(source);\n  if (!jit) {\n    // transform ASTs\n    transform(ast, assignedOptions);\n    // generate javascript codes\n    return generate(ast, assignedOptions);\n  } else {\n    // optimize ASTs\n    enambeOptimize && optimize(ast);\n    // minimize ASTs\n    enalbeMinify && minify(ast);\n    // In JIT mode, no ast transform, no code generation.\n    return {\n      ast,\n      code: ''\n    };\n  }\n}\nexport { CompileErrorCodes, ERROR_DOMAIN$2 as ERROR_DOMAIN, LOCATION_STUB, baseCompile, createCompileError, createLocation, createParser, createPosition, defaultOnError, detectHtmlTag, errorMessages };","map":{"version":3,"names":["LOCATION_STUB","start","line","column","offset","end","createPosition","createLocation","source","loc","RE_ARGS","format","message","args","length","isObject","hasOwnProperty","replace","match","identifier","assign","Object","isString","val","join","items","separator","reduce","str","item","index","CompileErrorCodes","EXPECTED_TOKEN","INVALID_TOKEN_IN_PLACEHOLDER","UNTERMINATED_SINGLE_QUOTE_IN_PLACEHOLDER","UNKNOWN_ESCAPE_SEQUENCE","INVALID_UNICODE_ESCAPE_SEQUENCE","UNBALANCED_CLOSING_BRACE","UNTERMINATED_CLOSING_BRACE","EMPTY_PLACEHOLDER","NOT_ALLOW_NEST_PLACEHOLDER","INVALID_LINKED_FORMAT","MUST_HAVE_MESSAGES_IN_PLURAL","UNEXPECTED_EMPTY_LINKED_MODIFIER","UNEXPECTED_EMPTY_LINKED_KEY","UNEXPECTED_LEXICAL_ANALYSIS","UNHANDLED_CODEGEN_NODE_TYPE","UNHANDLED_MINIFIER_NODE_TYPE","__EXTEND_POINT__","errorMessages","createCompileError","code","options","domain","messages","msg","error","SyntaxError","String","location","defaultOnError","RE_HTML_TAG","detectHtmlTag","test","CHAR_SP","CHAR_CR","CHAR_LF","CHAR_LS","fromCharCode","CHAR_PS","createScanner","_buf","_index","_line","_column","_peekOffset","isCRLF","isLF","isPS","isLS","isLineEnd","peekOffset","charAt","currentChar","currentPeek","next","peek","reset","resetPeek","skipToPeek","target","EOF","undefined","DOT","LITERAL_DELIMITER","ERROR_DOMAIN$3","createTokenizer","_scnr","currentOffset","currentPosition","_initLoc","_initOffset","_context","currentType","startLoc","endLoc","lastType","lastOffset","lastStartLoc","lastEndLoc","braceNest","inLinked","text","context","onError","emitError","pos","ctx","err","getToken","type","value","token","getEndToken","eat","scnr","ch","peekSpaces","buf","skipSpaces","isIdentifierStart","cc","charCodeAt","isNumberStart","isNamedIdentifierStart","ret","isListIdentifierStart","isLiteralStart","isLinkedDotStart","isLinkedModifierStart","isLinkedDelimiterStart","isLinkedReferStart","fn","isTextStart","isPluralStart","hasSpace","prev","takeChar","isIdentifier","takeIdentifierChar","isNamedIdentifier","takeNamedIdentifierChar","isDigit","takeDigit","isHexDigit","takeHexDigit","getDigits","num","readText","readNamedIdentifier","name","readListIdentifier","isLiteral","readLiteral","literal","readEscapeSequence","current","readUnicodeEscapeSequence","unicode","digits","sequence","i","isInvalidIdentifier","readInvalidIdentifier","identifiers","readLinkedModifier","readLinkedRefer","readPlural","plural","readTokenInPlaceholder","readTokenInLinked","validNamedIdentifier","validListIdentifier","validLiteral","readToken","nextToken","ERROR_DOMAIN$2","KNOWN_ESCAPES","fromEscapeSequence","codePoint4","codePoint6","codePoint","parseInt","fromCodePoint","createParser","tokenzer","startNode","node","endNode","parseText","tokenizer","parseList","parseNamed","key","parseLiteral","parseLinkedModifier","nextConsumeToken","getTokenCaption","parseLinkedKey","parseLinked","linkedNode","parsed","modifier","nextContext","emptyLinkedKeyNode","parseMessage","startOffset","push","endOffset","parsePlural","msgNode","hasEmptyMessage","cases","parseResource","parse","body","onCacheKey","cacheKey","slice","createTransformer","ast","helpers","Set","helper","add","traverseNodes","nodes","transformer","traverseNode","linked","transform","Array","from","optimize","optimizeMessageNode","forEach","c","static","values","ERROR_DOMAIN$1","minify","t","resource","b","s","valueNode","v","k","m","list","named","ERROR_DOMAIN","createCodeGenerator","sourceMap","filename","breakLineCode","needIndent","_needIndent","map","indentLevel","_newline","n","withBreakLine","_breakLineCode","repeat","indent","withNewLine","level","deindent","newline","generateLinkedNode","generator","generateNode","generateMessageNode","generatePluralNode","generateResource","JSON","stringify","generate","mode","toJSON","baseCompile","assignedOptions","jit","enalbeMinify","enambeOptimize","parser"],"sources":["/Users/chris/Desktop/matcha_42/matcha/node_modules/@intlify/message-compiler/dist/message-compiler.esm-browser.js"],"sourcesContent":["/*!\n  * message-compiler v10.0.0-alpha.3\n  * (c) 2024 kazuya kawaguchi\n  * Released under the MIT License.\n  */\nconst LOCATION_STUB = {\n    start: { line: 1, column: 1, offset: 0 },\n    end: { line: 1, column: 1, offset: 0 }\n};\nfunction createPosition(line, column, offset) {\n    return { line, column, offset };\n}\nfunction createLocation(start, end, source) {\n    const loc = { start, end };\n    if (source != null) {\n        loc.source = source;\n    }\n    return loc;\n}\n\n/**\n * Original Utilities\n * written by kazuya kawaguchi\n */\nconst RE_ARGS = /\\{([0-9a-zA-Z]+)\\}/g;\n/* eslint-disable */\nfunction format(message, ...args) {\n    if (args.length === 1 && isObject(args[0])) {\n        args = args[0];\n    }\n    if (!args || !args.hasOwnProperty) {\n        args = {};\n    }\n    return message.replace(RE_ARGS, (match, identifier) => {\n        return args.hasOwnProperty(identifier) ? args[identifier] : '';\n    });\n}\nconst assign = Object.assign;\nconst isString = (val) => typeof val === 'string';\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst isObject = (val) => val !== null && typeof val === 'object';\nfunction join(items, separator = '') {\n    return items.reduce((str, item, index) => (index === 0 ? str + item : str + separator + item), '');\n}\n\nconst CompileErrorCodes = {\n    // tokenizer error codes\n    EXPECTED_TOKEN: 1,\n    INVALID_TOKEN_IN_PLACEHOLDER: 2,\n    UNTERMINATED_SINGLE_QUOTE_IN_PLACEHOLDER: 3,\n    UNKNOWN_ESCAPE_SEQUENCE: 4,\n    INVALID_UNICODE_ESCAPE_SEQUENCE: 5,\n    UNBALANCED_CLOSING_BRACE: 6,\n    UNTERMINATED_CLOSING_BRACE: 7,\n    EMPTY_PLACEHOLDER: 8,\n    NOT_ALLOW_NEST_PLACEHOLDER: 9,\n    INVALID_LINKED_FORMAT: 10,\n    // parser error codes\n    MUST_HAVE_MESSAGES_IN_PLURAL: 11,\n    UNEXPECTED_EMPTY_LINKED_MODIFIER: 12,\n    UNEXPECTED_EMPTY_LINKED_KEY: 13,\n    UNEXPECTED_LEXICAL_ANALYSIS: 14,\n    // generator error codes\n    UNHANDLED_CODEGEN_NODE_TYPE: 15,\n    // minifier error codes\n    UNHANDLED_MINIFIER_NODE_TYPE: 16,\n    // Special value for higher-order compilers to pick up the last code\n    // to avoid collision of error codes. This should always be kept as the last\n    // item.\n    __EXTEND_POINT__: 17\n};\n/** @internal */\nconst errorMessages = {\n    // tokenizer error messages\n    [CompileErrorCodes.EXPECTED_TOKEN]: `Expected token: '{0}'`,\n    [CompileErrorCodes.INVALID_TOKEN_IN_PLACEHOLDER]: `Invalid token in placeholder: '{0}'`,\n    [CompileErrorCodes.UNTERMINATED_SINGLE_QUOTE_IN_PLACEHOLDER]: `Unterminated single quote in placeholder`,\n    [CompileErrorCodes.UNKNOWN_ESCAPE_SEQUENCE]: `Unknown escape sequence: \\\\{0}`,\n    [CompileErrorCodes.INVALID_UNICODE_ESCAPE_SEQUENCE]: `Invalid unicode escape sequence: {0}`,\n    [CompileErrorCodes.UNBALANCED_CLOSING_BRACE]: `Unbalanced closing brace`,\n    [CompileErrorCodes.UNTERMINATED_CLOSING_BRACE]: `Unterminated closing brace`,\n    [CompileErrorCodes.EMPTY_PLACEHOLDER]: `Empty placeholder`,\n    [CompileErrorCodes.NOT_ALLOW_NEST_PLACEHOLDER]: `Not allowed nest placeholder`,\n    [CompileErrorCodes.INVALID_LINKED_FORMAT]: `Invalid linked format`,\n    // parser error messages\n    [CompileErrorCodes.MUST_HAVE_MESSAGES_IN_PLURAL]: `Plural must have messages`,\n    [CompileErrorCodes.UNEXPECTED_EMPTY_LINKED_MODIFIER]: `Unexpected empty linked modifier`,\n    [CompileErrorCodes.UNEXPECTED_EMPTY_LINKED_KEY]: `Unexpected empty linked key`,\n    [CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS]: `Unexpected lexical analysis in token: '{0}'`,\n    // generator error messages\n    [CompileErrorCodes.UNHANDLED_CODEGEN_NODE_TYPE]: `unhandled codegen node type: '{0}'`,\n    // minimizer error messages\n    [CompileErrorCodes.UNHANDLED_MINIFIER_NODE_TYPE]: `unhandled mimifier node type: '{0}'`\n};\nfunction createCompileError(code, loc, options = {}) {\n    const { domain, messages, args } = options;\n    const msg = format((messages || errorMessages)[code] || '', ...(args || []))\n        ;\n    const error = new SyntaxError(String(msg));\n    error.code = code;\n    if (loc) {\n        error.location = loc;\n    }\n    error.domain = domain;\n    return error;\n}\n/** @internal */\nfunction defaultOnError(error) {\n    throw error;\n}\n\n// eslint-disable-next-line no-useless-escape\nconst RE_HTML_TAG = /<\\/?[\\w\\s=\"/.':;#-\\/]+>/;\nconst detectHtmlTag = (source) => RE_HTML_TAG.test(source);\n\nconst CHAR_SP = ' ';\nconst CHAR_CR = '\\r';\nconst CHAR_LF = '\\n';\nconst CHAR_LS = String.fromCharCode(0x2028);\nconst CHAR_PS = String.fromCharCode(0x2029);\nfunction createScanner(str) {\n    const _buf = str;\n    let _index = 0;\n    let _line = 1;\n    let _column = 1;\n    let _peekOffset = 0;\n    const isCRLF = (index) => _buf[index] === CHAR_CR && _buf[index + 1] === CHAR_LF;\n    const isLF = (index) => _buf[index] === CHAR_LF;\n    const isPS = (index) => _buf[index] === CHAR_PS;\n    const isLS = (index) => _buf[index] === CHAR_LS;\n    const isLineEnd = (index) => isCRLF(index) || isLF(index) || isPS(index) || isLS(index);\n    const index = () => _index;\n    const line = () => _line;\n    const column = () => _column;\n    const peekOffset = () => _peekOffset;\n    const charAt = (offset) => isCRLF(offset) || isPS(offset) || isLS(offset) ? CHAR_LF : _buf[offset];\n    const currentChar = () => charAt(_index);\n    const currentPeek = () => charAt(_index + _peekOffset);\n    function next() {\n        _peekOffset = 0;\n        if (isLineEnd(_index)) {\n            _line++;\n            _column = 0;\n        }\n        if (isCRLF(_index)) {\n            _index++;\n        }\n        _index++;\n        _column++;\n        return _buf[_index];\n    }\n    function peek() {\n        if (isCRLF(_index + _peekOffset)) {\n            _peekOffset++;\n        }\n        _peekOffset++;\n        return _buf[_index + _peekOffset];\n    }\n    function reset() {\n        _index = 0;\n        _line = 1;\n        _column = 1;\n        _peekOffset = 0;\n    }\n    function resetPeek(offset = 0) {\n        _peekOffset = offset;\n    }\n    function skipToPeek() {\n        const target = _index + _peekOffset;\n        while (target !== _index) {\n            next();\n        }\n        _peekOffset = 0;\n    }\n    return {\n        index,\n        line,\n        column,\n        peekOffset,\n        charAt,\n        currentChar,\n        currentPeek,\n        next,\n        peek,\n        reset,\n        resetPeek,\n        skipToPeek\n    };\n}\n\nconst EOF = undefined;\nconst DOT = '.';\nconst LITERAL_DELIMITER = \"'\";\nconst ERROR_DOMAIN$3 = 'tokenizer';\nfunction createTokenizer(source, options = {}) {\n    const location = options.location !== false;\n    const _scnr = createScanner(source);\n    const currentOffset = () => _scnr.index();\n    const currentPosition = () => createPosition(_scnr.line(), _scnr.column(), _scnr.index());\n    const _initLoc = currentPosition();\n    const _initOffset = currentOffset();\n    const _context = {\n        currentType: 13 /* TokenTypes.EOF */,\n        offset: _initOffset,\n        startLoc: _initLoc,\n        endLoc: _initLoc,\n        lastType: 13 /* TokenTypes.EOF */,\n        lastOffset: _initOffset,\n        lastStartLoc: _initLoc,\n        lastEndLoc: _initLoc,\n        braceNest: 0,\n        inLinked: false,\n        text: ''\n    };\n    const context = () => _context;\n    const { onError } = options;\n    function emitError(code, pos, offset, ...args) {\n        const ctx = context();\n        pos.column += offset;\n        pos.offset += offset;\n        if (onError) {\n            const loc = location ? createLocation(ctx.startLoc, pos) : null;\n            const err = createCompileError(code, loc, {\n                domain: ERROR_DOMAIN$3,\n                args\n            });\n            onError(err);\n        }\n    }\n    function getToken(context, type, value) {\n        context.endLoc = currentPosition();\n        context.currentType = type;\n        const token = { type };\n        if (location) {\n            token.loc = createLocation(context.startLoc, context.endLoc);\n        }\n        if (value != null) {\n            token.value = value;\n        }\n        return token;\n    }\n    const getEndToken = (context) => getToken(context, 13 /* TokenTypes.EOF */);\n    function eat(scnr, ch) {\n        if (scnr.currentChar() === ch) {\n            scnr.next();\n            return ch;\n        }\n        else {\n            emitError(CompileErrorCodes.EXPECTED_TOKEN, currentPosition(), 0, ch);\n            return '';\n        }\n    }\n    function peekSpaces(scnr) {\n        let buf = '';\n        while (scnr.currentPeek() === CHAR_SP || scnr.currentPeek() === CHAR_LF) {\n            buf += scnr.currentPeek();\n            scnr.peek();\n        }\n        return buf;\n    }\n    function skipSpaces(scnr) {\n        const buf = peekSpaces(scnr);\n        scnr.skipToPeek();\n        return buf;\n    }\n    function isIdentifierStart(ch) {\n        if (ch === EOF) {\n            return false;\n        }\n        const cc = ch.charCodeAt(0);\n        return ((cc >= 97 && cc <= 122) || // a-z\n            (cc >= 65 && cc <= 90) || // A-Z\n            cc === 95 // _\n        );\n    }\n    function isNumberStart(ch) {\n        if (ch === EOF) {\n            return false;\n        }\n        const cc = ch.charCodeAt(0);\n        return cc >= 48 && cc <= 57; // 0-9\n    }\n    function isNamedIdentifierStart(scnr, context) {\n        const { currentType } = context;\n        if (currentType !== 2 /* TokenTypes.BraceLeft */) {\n            return false;\n        }\n        peekSpaces(scnr);\n        const ret = isIdentifierStart(scnr.currentPeek());\n        scnr.resetPeek();\n        return ret;\n    }\n    function isListIdentifierStart(scnr, context) {\n        const { currentType } = context;\n        if (currentType !== 2 /* TokenTypes.BraceLeft */) {\n            return false;\n        }\n        peekSpaces(scnr);\n        const ch = scnr.currentPeek() === '-' ? scnr.peek() : scnr.currentPeek();\n        const ret = isNumberStart(ch);\n        scnr.resetPeek();\n        return ret;\n    }\n    function isLiteralStart(scnr, context) {\n        const { currentType } = context;\n        if (currentType !== 2 /* TokenTypes.BraceLeft */) {\n            return false;\n        }\n        peekSpaces(scnr);\n        const ret = scnr.currentPeek() === LITERAL_DELIMITER;\n        scnr.resetPeek();\n        return ret;\n    }\n    function isLinkedDotStart(scnr, context) {\n        const { currentType } = context;\n        if (currentType !== 7 /* TokenTypes.LinkedAlias */) {\n            return false;\n        }\n        peekSpaces(scnr);\n        const ret = scnr.currentPeek() === \".\" /* TokenChars.LinkedDot */;\n        scnr.resetPeek();\n        return ret;\n    }\n    function isLinkedModifierStart(scnr, context) {\n        const { currentType } = context;\n        if (currentType !== 8 /* TokenTypes.LinkedDot */) {\n            return false;\n        }\n        peekSpaces(scnr);\n        const ret = isIdentifierStart(scnr.currentPeek());\n        scnr.resetPeek();\n        return ret;\n    }\n    function isLinkedDelimiterStart(scnr, context) {\n        const { currentType } = context;\n        if (!(currentType === 7 /* TokenTypes.LinkedAlias */ ||\n            currentType === 11 /* TokenTypes.LinkedModifier */)) {\n            return false;\n        }\n        peekSpaces(scnr);\n        const ret = scnr.currentPeek() === \":\" /* TokenChars.LinkedDelimiter */;\n        scnr.resetPeek();\n        return ret;\n    }\n    function isLinkedReferStart(scnr, context) {\n        const { currentType } = context;\n        if (currentType !== 9 /* TokenTypes.LinkedDelimiter */) {\n            return false;\n        }\n        const fn = () => {\n            const ch = scnr.currentPeek();\n            if (ch === \"{\" /* TokenChars.BraceLeft */) {\n                return isIdentifierStart(scnr.peek());\n            }\n            else if (ch === \"@\" /* TokenChars.LinkedAlias */ ||\n                ch === \"|\" /* TokenChars.Pipe */ ||\n                ch === \":\" /* TokenChars.LinkedDelimiter */ ||\n                ch === \".\" /* TokenChars.LinkedDot */ ||\n                ch === CHAR_SP ||\n                !ch) {\n                return false;\n            }\n            else if (ch === CHAR_LF) {\n                scnr.peek();\n                return fn();\n            }\n            else {\n                // other characters\n                return isTextStart(scnr, false);\n            }\n        };\n        const ret = fn();\n        scnr.resetPeek();\n        return ret;\n    }\n    function isPluralStart(scnr) {\n        peekSpaces(scnr);\n        const ret = scnr.currentPeek() === \"|\" /* TokenChars.Pipe */;\n        scnr.resetPeek();\n        return ret;\n    }\n    function isTextStart(scnr, reset = true) {\n        const fn = (hasSpace = false, prev = '') => {\n            const ch = scnr.currentPeek();\n            if (ch === \"{\" /* TokenChars.BraceLeft */) {\n                return hasSpace;\n            }\n            else if (ch === \"@\" /* TokenChars.LinkedAlias */ || !ch) {\n                return hasSpace;\n            }\n            else if (ch === \"|\" /* TokenChars.Pipe */) {\n                return !(prev === CHAR_SP || prev === CHAR_LF);\n            }\n            else if (ch === CHAR_SP) {\n                scnr.peek();\n                return fn(true, CHAR_SP);\n            }\n            else if (ch === CHAR_LF) {\n                scnr.peek();\n                return fn(true, CHAR_LF);\n            }\n            else {\n                return true;\n            }\n        };\n        const ret = fn();\n        reset && scnr.resetPeek();\n        return ret;\n    }\n    function takeChar(scnr, fn) {\n        const ch = scnr.currentChar();\n        if (ch === EOF) {\n            return EOF;\n        }\n        if (fn(ch)) {\n            scnr.next();\n            return ch;\n        }\n        return null;\n    }\n    function isIdentifier(ch) {\n        const cc = ch.charCodeAt(0);\n        return ((cc >= 97 && cc <= 122) || // a-z\n            (cc >= 65 && cc <= 90) || // A-Z\n            (cc >= 48 && cc <= 57) || // 0-9\n            cc === 95 || // _\n            cc === 36 // $\n        );\n    }\n    function takeIdentifierChar(scnr) {\n        return takeChar(scnr, isIdentifier);\n    }\n    function isNamedIdentifier(ch) {\n        const cc = ch.charCodeAt(0);\n        return ((cc >= 97 && cc <= 122) || // a-z\n            (cc >= 65 && cc <= 90) || // A-Z\n            (cc >= 48 && cc <= 57) || // 0-9\n            cc === 95 || // _\n            cc === 36 || // $\n            cc === 45 // -\n        );\n    }\n    function takeNamedIdentifierChar(scnr) {\n        return takeChar(scnr, isNamedIdentifier);\n    }\n    function isDigit(ch) {\n        const cc = ch.charCodeAt(0);\n        return cc >= 48 && cc <= 57; // 0-9\n    }\n    function takeDigit(scnr) {\n        return takeChar(scnr, isDigit);\n    }\n    function isHexDigit(ch) {\n        const cc = ch.charCodeAt(0);\n        return ((cc >= 48 && cc <= 57) || // 0-9\n            (cc >= 65 && cc <= 70) || // A-F\n            (cc >= 97 && cc <= 102)); // a-f\n    }\n    function takeHexDigit(scnr) {\n        return takeChar(scnr, isHexDigit);\n    }\n    function getDigits(scnr) {\n        let ch = '';\n        let num = '';\n        while ((ch = takeDigit(scnr))) {\n            num += ch;\n        }\n        return num;\n    }\n    function readText(scnr) {\n        let buf = '';\n        while (true) {\n            const ch = scnr.currentChar();\n            if (ch === \"{\" /* TokenChars.BraceLeft */ ||\n                ch === \"}\" /* TokenChars.BraceRight */ ||\n                ch === \"@\" /* TokenChars.LinkedAlias */ ||\n                ch === \"|\" /* TokenChars.Pipe */ ||\n                !ch) {\n                break;\n            }\n            else if (ch === CHAR_SP || ch === CHAR_LF) {\n                if (isTextStart(scnr)) {\n                    buf += ch;\n                    scnr.next();\n                }\n                else if (isPluralStart(scnr)) {\n                    break;\n                }\n                else {\n                    buf += ch;\n                    scnr.next();\n                }\n            }\n            else {\n                buf += ch;\n                scnr.next();\n            }\n        }\n        return buf;\n    }\n    function readNamedIdentifier(scnr) {\n        skipSpaces(scnr);\n        let ch = '';\n        let name = '';\n        while ((ch = takeNamedIdentifierChar(scnr))) {\n            name += ch;\n        }\n        if (scnr.currentChar() === EOF) {\n            emitError(CompileErrorCodes.UNTERMINATED_CLOSING_BRACE, currentPosition(), 0);\n        }\n        return name;\n    }\n    function readListIdentifier(scnr) {\n        skipSpaces(scnr);\n        let value = '';\n        if (scnr.currentChar() === '-') {\n            scnr.next();\n            value += `-${getDigits(scnr)}`;\n        }\n        else {\n            value += getDigits(scnr);\n        }\n        if (scnr.currentChar() === EOF) {\n            emitError(CompileErrorCodes.UNTERMINATED_CLOSING_BRACE, currentPosition(), 0);\n        }\n        return value;\n    }\n    function isLiteral(ch) {\n        return ch !== LITERAL_DELIMITER && ch !== CHAR_LF;\n    }\n    function readLiteral(scnr) {\n        skipSpaces(scnr);\n        // eslint-disable-next-line no-useless-escape\n        eat(scnr, `\\'`);\n        let ch = '';\n        let literal = '';\n        while ((ch = takeChar(scnr, isLiteral))) {\n            if (ch === '\\\\') {\n                literal += readEscapeSequence(scnr);\n            }\n            else {\n                literal += ch;\n            }\n        }\n        const current = scnr.currentChar();\n        if (current === CHAR_LF || current === EOF) {\n            emitError(CompileErrorCodes.UNTERMINATED_SINGLE_QUOTE_IN_PLACEHOLDER, currentPosition(), 0);\n            // TODO: Is it correct really?\n            if (current === CHAR_LF) {\n                scnr.next();\n                // eslint-disable-next-line no-useless-escape\n                eat(scnr, `\\'`);\n            }\n            return literal;\n        }\n        // eslint-disable-next-line no-useless-escape\n        eat(scnr, `\\'`);\n        return literal;\n    }\n    function readEscapeSequence(scnr) {\n        const ch = scnr.currentChar();\n        switch (ch) {\n            case '\\\\':\n            case `\\'`: // eslint-disable-line no-useless-escape\n                scnr.next();\n                return `\\\\${ch}`;\n            case 'u':\n                return readUnicodeEscapeSequence(scnr, ch, 4);\n            case 'U':\n                return readUnicodeEscapeSequence(scnr, ch, 6);\n            default:\n                emitError(CompileErrorCodes.UNKNOWN_ESCAPE_SEQUENCE, currentPosition(), 0, ch);\n                return '';\n        }\n    }\n    function readUnicodeEscapeSequence(scnr, unicode, digits) {\n        eat(scnr, unicode);\n        let sequence = '';\n        for (let i = 0; i < digits; i++) {\n            const ch = takeHexDigit(scnr);\n            if (!ch) {\n                emitError(CompileErrorCodes.INVALID_UNICODE_ESCAPE_SEQUENCE, currentPosition(), 0, `\\\\${unicode}${sequence}${scnr.currentChar()}`);\n                break;\n            }\n            sequence += ch;\n        }\n        return `\\\\${unicode}${sequence}`;\n    }\n    function isInvalidIdentifier(ch) {\n        return (ch !== \"{\" /* TokenChars.BraceLeft */ &&\n            ch !== \"}\" /* TokenChars.BraceRight */ &&\n            ch !== CHAR_SP &&\n            ch !== CHAR_LF);\n    }\n    function readInvalidIdentifier(scnr) {\n        skipSpaces(scnr);\n        let ch = '';\n        let identifiers = '';\n        while ((ch = takeChar(scnr, isInvalidIdentifier))) {\n            identifiers += ch;\n        }\n        return identifiers;\n    }\n    function readLinkedModifier(scnr) {\n        let ch = '';\n        let name = '';\n        while ((ch = takeIdentifierChar(scnr))) {\n            name += ch;\n        }\n        return name;\n    }\n    function readLinkedRefer(scnr) {\n        const fn = (buf) => {\n            const ch = scnr.currentChar();\n            if (ch === \"{\" /* TokenChars.BraceLeft */ ||\n                ch === \"@\" /* TokenChars.LinkedAlias */ ||\n                ch === \"|\" /* TokenChars.Pipe */ ||\n                ch === \"(\" /* TokenChars.ParenLeft */ ||\n                ch === \")\" /* TokenChars.ParenRight */ ||\n                !ch) {\n                return buf;\n            }\n            else if (ch === CHAR_SP) {\n                return buf;\n            }\n            else if (ch === CHAR_LF || ch === DOT) {\n                buf += ch;\n                scnr.next();\n                return fn(buf);\n            }\n            else {\n                buf += ch;\n                scnr.next();\n                return fn(buf);\n            }\n        };\n        return fn('');\n    }\n    function readPlural(scnr) {\n        skipSpaces(scnr);\n        const plural = eat(scnr, \"|\" /* TokenChars.Pipe */);\n        skipSpaces(scnr);\n        return plural;\n    }\n    // TODO: We need refactoring of token parsing ...\n    function readTokenInPlaceholder(scnr, context) {\n        let token = null;\n        const ch = scnr.currentChar();\n        switch (ch) {\n            case \"{\" /* TokenChars.BraceLeft */:\n                if (context.braceNest >= 1) {\n                    emitError(CompileErrorCodes.NOT_ALLOW_NEST_PLACEHOLDER, currentPosition(), 0);\n                }\n                scnr.next();\n                token = getToken(context, 2 /* TokenTypes.BraceLeft */, \"{\" /* TokenChars.BraceLeft */);\n                skipSpaces(scnr);\n                context.braceNest++;\n                return token;\n            case \"}\" /* TokenChars.BraceRight */:\n                if (context.braceNest > 0 &&\n                    context.currentType === 2 /* TokenTypes.BraceLeft */) {\n                    emitError(CompileErrorCodes.EMPTY_PLACEHOLDER, currentPosition(), 0);\n                }\n                scnr.next();\n                token = getToken(context, 3 /* TokenTypes.BraceRight */, \"}\" /* TokenChars.BraceRight */);\n                context.braceNest--;\n                context.braceNest > 0 && skipSpaces(scnr);\n                if (context.inLinked && context.braceNest === 0) {\n                    context.inLinked = false;\n                }\n                return token;\n            case \"@\" /* TokenChars.LinkedAlias */:\n                if (context.braceNest > 0) {\n                    emitError(CompileErrorCodes.UNTERMINATED_CLOSING_BRACE, currentPosition(), 0);\n                }\n                token = readTokenInLinked(scnr, context) || getEndToken(context);\n                context.braceNest = 0;\n                return token;\n            default: {\n                let validNamedIdentifier = true;\n                let validListIdentifier = true;\n                let validLiteral = true;\n                if (isPluralStart(scnr)) {\n                    if (context.braceNest > 0) {\n                        emitError(CompileErrorCodes.UNTERMINATED_CLOSING_BRACE, currentPosition(), 0);\n                    }\n                    token = getToken(context, 1 /* TokenTypes.Pipe */, readPlural(scnr));\n                    // reset\n                    context.braceNest = 0;\n                    context.inLinked = false;\n                    return token;\n                }\n                if (context.braceNest > 0 &&\n                    (context.currentType === 4 /* TokenTypes.Named */ ||\n                        context.currentType === 5 /* TokenTypes.List */ ||\n                        context.currentType === 6 /* TokenTypes.Literal */)) {\n                    emitError(CompileErrorCodes.UNTERMINATED_CLOSING_BRACE, currentPosition(), 0);\n                    context.braceNest = 0;\n                    return readToken(scnr, context);\n                }\n                if ((validNamedIdentifier = isNamedIdentifierStart(scnr, context))) {\n                    token = getToken(context, 4 /* TokenTypes.Named */, readNamedIdentifier(scnr));\n                    skipSpaces(scnr);\n                    return token;\n                }\n                if ((validListIdentifier = isListIdentifierStart(scnr, context))) {\n                    token = getToken(context, 5 /* TokenTypes.List */, readListIdentifier(scnr));\n                    skipSpaces(scnr);\n                    return token;\n                }\n                if ((validLiteral = isLiteralStart(scnr, context))) {\n                    token = getToken(context, 6 /* TokenTypes.Literal */, readLiteral(scnr));\n                    skipSpaces(scnr);\n                    return token;\n                }\n                if (!validNamedIdentifier && !validListIdentifier && !validLiteral) {\n                    // TODO: we should be re-designed invalid cases, when we will extend message syntax near the future ...\n                    token = getToken(context, 12 /* TokenTypes.InvalidPlace */, readInvalidIdentifier(scnr));\n                    emitError(CompileErrorCodes.INVALID_TOKEN_IN_PLACEHOLDER, currentPosition(), 0, token.value);\n                    skipSpaces(scnr);\n                    return token;\n                }\n                break;\n            }\n        }\n        return token;\n    }\n    // TODO: We need refactoring of token parsing ...\n    function readTokenInLinked(scnr, context) {\n        const { currentType } = context;\n        let token = null;\n        const ch = scnr.currentChar();\n        if ((currentType === 7 /* TokenTypes.LinkedAlias */ ||\n            currentType === 8 /* TokenTypes.LinkedDot */ ||\n            currentType === 11 /* TokenTypes.LinkedModifier */ ||\n            currentType === 9 /* TokenTypes.LinkedDelimiter */) &&\n            (ch === CHAR_LF || ch === CHAR_SP)) {\n            emitError(CompileErrorCodes.INVALID_LINKED_FORMAT, currentPosition(), 0);\n        }\n        switch (ch) {\n            case \"@\" /* TokenChars.LinkedAlias */:\n                scnr.next();\n                token = getToken(context, 7 /* TokenTypes.LinkedAlias */, \"@\" /* TokenChars.LinkedAlias */);\n                context.inLinked = true;\n                return token;\n            case \".\" /* TokenChars.LinkedDot */:\n                skipSpaces(scnr);\n                scnr.next();\n                return getToken(context, 8 /* TokenTypes.LinkedDot */, \".\" /* TokenChars.LinkedDot */);\n            case \":\" /* TokenChars.LinkedDelimiter */:\n                skipSpaces(scnr);\n                scnr.next();\n                return getToken(context, 9 /* TokenTypes.LinkedDelimiter */, \":\" /* TokenChars.LinkedDelimiter */);\n            default:\n                if (isPluralStart(scnr)) {\n                    token = getToken(context, 1 /* TokenTypes.Pipe */, readPlural(scnr));\n                    // reset\n                    context.braceNest = 0;\n                    context.inLinked = false;\n                    return token;\n                }\n                if (isLinkedDotStart(scnr, context) ||\n                    isLinkedDelimiterStart(scnr, context)) {\n                    skipSpaces(scnr);\n                    return readTokenInLinked(scnr, context);\n                }\n                if (isLinkedModifierStart(scnr, context)) {\n                    skipSpaces(scnr);\n                    return getToken(context, 11 /* TokenTypes.LinkedModifier */, readLinkedModifier(scnr));\n                }\n                if (isLinkedReferStart(scnr, context)) {\n                    skipSpaces(scnr);\n                    if (ch === \"{\" /* TokenChars.BraceLeft */) {\n                        // scan the placeholder\n                        return readTokenInPlaceholder(scnr, context) || token;\n                    }\n                    else {\n                        return getToken(context, 10 /* TokenTypes.LinkedKey */, readLinkedRefer(scnr));\n                    }\n                }\n                if (currentType === 7 /* TokenTypes.LinkedAlias */) {\n                    emitError(CompileErrorCodes.INVALID_LINKED_FORMAT, currentPosition(), 0);\n                }\n                context.braceNest = 0;\n                context.inLinked = false;\n                return readToken(scnr, context);\n        }\n    }\n    // TODO: We need refactoring of token parsing ...\n    function readToken(scnr, context) {\n        let token = { type: 13 /* TokenTypes.EOF */ };\n        if (context.braceNest > 0) {\n            return readTokenInPlaceholder(scnr, context) || getEndToken(context);\n        }\n        if (context.inLinked) {\n            return readTokenInLinked(scnr, context) || getEndToken(context);\n        }\n        const ch = scnr.currentChar();\n        switch (ch) {\n            case \"{\" /* TokenChars.BraceLeft */:\n                return readTokenInPlaceholder(scnr, context) || getEndToken(context);\n            case \"}\" /* TokenChars.BraceRight */:\n                emitError(CompileErrorCodes.UNBALANCED_CLOSING_BRACE, currentPosition(), 0);\n                scnr.next();\n                return getToken(context, 3 /* TokenTypes.BraceRight */, \"}\" /* TokenChars.BraceRight */);\n            case \"@\" /* TokenChars.LinkedAlias */:\n                return readTokenInLinked(scnr, context) || getEndToken(context);\n            default: {\n                if (isPluralStart(scnr)) {\n                    token = getToken(context, 1 /* TokenTypes.Pipe */, readPlural(scnr));\n                    // reset\n                    context.braceNest = 0;\n                    context.inLinked = false;\n                    return token;\n                }\n                if (isTextStart(scnr)) {\n                    return getToken(context, 0 /* TokenTypes.Text */, readText(scnr));\n                }\n                break;\n            }\n        }\n        return token;\n    }\n    function nextToken() {\n        const { currentType, offset, startLoc, endLoc } = _context;\n        _context.lastType = currentType;\n        _context.lastOffset = offset;\n        _context.lastStartLoc = startLoc;\n        _context.lastEndLoc = endLoc;\n        _context.offset = currentOffset();\n        _context.startLoc = currentPosition();\n        if (_scnr.currentChar() === EOF) {\n            return getToken(_context, 13 /* TokenTypes.EOF */);\n        }\n        return readToken(_scnr, _context);\n    }\n    return {\n        nextToken,\n        currentOffset,\n        currentPosition,\n        context\n    };\n}\n\nconst ERROR_DOMAIN$2 = 'parser';\n// Backslash backslash, backslash quote, uHHHH, UHHHHHH.\nconst KNOWN_ESCAPES = /(?:\\\\\\\\|\\\\'|\\\\u([0-9a-fA-F]{4})|\\\\U([0-9a-fA-F]{6}))/g;\nfunction fromEscapeSequence(match, codePoint4, codePoint6) {\n    switch (match) {\n        case `\\\\\\\\`:\n            return `\\\\`;\n        // eslint-disable-next-line no-useless-escape\n        case `\\\\\\'`:\n            // eslint-disable-next-line no-useless-escape\n            return `\\'`;\n        default: {\n            const codePoint = parseInt(codePoint4 || codePoint6, 16);\n            if (codePoint <= 0xd7ff || codePoint >= 0xe000) {\n                return String.fromCodePoint(codePoint);\n            }\n            // invalid ...\n            // Replace them with U+FFFD REPLACEMENT CHARACTER.\n            return '�';\n        }\n    }\n}\nfunction createParser(options = {}) {\n    const location = options.location !== false;\n    const { onError } = options;\n    function emitError(tokenzer, code, start, offset, ...args) {\n        const end = tokenzer.currentPosition();\n        end.offset += offset;\n        end.column += offset;\n        if (onError) {\n            const loc = location ? createLocation(start, end) : null;\n            const err = createCompileError(code, loc, {\n                domain: ERROR_DOMAIN$2,\n                args\n            });\n            onError(err);\n        }\n    }\n    function startNode(type, offset, loc) {\n        const node = { type };\n        if (location) {\n            node.start = offset;\n            node.end = offset;\n            node.loc = { start: loc, end: loc };\n        }\n        return node;\n    }\n    function endNode(node, offset, pos, type) {\n        if (type) {\n            node.type = type;\n        }\n        if (location) {\n            node.end = offset;\n            if (node.loc) {\n                node.loc.end = pos;\n            }\n        }\n    }\n    function parseText(tokenizer, value) {\n        const context = tokenizer.context();\n        const node = startNode(3 /* NodeTypes.Text */, context.offset, context.startLoc);\n        node.value = value;\n        endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n        return node;\n    }\n    function parseList(tokenizer, index) {\n        const context = tokenizer.context();\n        const { lastOffset: offset, lastStartLoc: loc } = context; // get brace left loc\n        const node = startNode(5 /* NodeTypes.List */, offset, loc);\n        node.index = parseInt(index, 10);\n        tokenizer.nextToken(); // skip brach right\n        endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n        return node;\n    }\n    function parseNamed(tokenizer, key) {\n        const context = tokenizer.context();\n        const { lastOffset: offset, lastStartLoc: loc } = context; // get brace left loc\n        const node = startNode(4 /* NodeTypes.Named */, offset, loc);\n        node.key = key;\n        tokenizer.nextToken(); // skip brach right\n        endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n        return node;\n    }\n    function parseLiteral(tokenizer, value) {\n        const context = tokenizer.context();\n        const { lastOffset: offset, lastStartLoc: loc } = context; // get brace left loc\n        const node = startNode(9 /* NodeTypes.Literal */, offset, loc);\n        node.value = value.replace(KNOWN_ESCAPES, fromEscapeSequence);\n        tokenizer.nextToken(); // skip brach right\n        endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n        return node;\n    }\n    function parseLinkedModifier(tokenizer) {\n        const token = tokenizer.nextToken();\n        const context = tokenizer.context();\n        const { lastOffset: offset, lastStartLoc: loc } = context; // get linked dot loc\n        const node = startNode(8 /* NodeTypes.LinkedModifier */, offset, loc);\n        if (token.type !== 11 /* TokenTypes.LinkedModifier */) {\n            // empty modifier\n            emitError(tokenizer, CompileErrorCodes.UNEXPECTED_EMPTY_LINKED_MODIFIER, context.lastStartLoc, 0);\n            node.value = '';\n            endNode(node, offset, loc);\n            return {\n                nextConsumeToken: token,\n                node\n            };\n        }\n        // check token\n        if (token.value == null) {\n            emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n        }\n        node.value = token.value || '';\n        endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n        return {\n            node\n        };\n    }\n    function parseLinkedKey(tokenizer, value) {\n        const context = tokenizer.context();\n        const node = startNode(7 /* NodeTypes.LinkedKey */, context.offset, context.startLoc);\n        node.value = value;\n        endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n        return node;\n    }\n    function parseLinked(tokenizer) {\n        const context = tokenizer.context();\n        const linkedNode = startNode(6 /* NodeTypes.Linked */, context.offset, context.startLoc);\n        let token = tokenizer.nextToken();\n        if (token.type === 8 /* TokenTypes.LinkedDot */) {\n            const parsed = parseLinkedModifier(tokenizer);\n            linkedNode.modifier = parsed.node;\n            token = parsed.nextConsumeToken || tokenizer.nextToken();\n        }\n        // asset check token\n        if (token.type !== 9 /* TokenTypes.LinkedDelimiter */) {\n            emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n        }\n        token = tokenizer.nextToken();\n        // skip brace left\n        if (token.type === 2 /* TokenTypes.BraceLeft */) {\n            token = tokenizer.nextToken();\n        }\n        switch (token.type) {\n            case 10 /* TokenTypes.LinkedKey */:\n                if (token.value == null) {\n                    emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n                }\n                linkedNode.key = parseLinkedKey(tokenizer, token.value || '');\n                break;\n            case 4 /* TokenTypes.Named */:\n                if (token.value == null) {\n                    emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n                }\n                linkedNode.key = parseNamed(tokenizer, token.value || '');\n                break;\n            case 5 /* TokenTypes.List */:\n                if (token.value == null) {\n                    emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n                }\n                linkedNode.key = parseList(tokenizer, token.value || '');\n                break;\n            case 6 /* TokenTypes.Literal */:\n                if (token.value == null) {\n                    emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n                }\n                linkedNode.key = parseLiteral(tokenizer, token.value || '');\n                break;\n            default: {\n                // empty key\n                emitError(tokenizer, CompileErrorCodes.UNEXPECTED_EMPTY_LINKED_KEY, context.lastStartLoc, 0);\n                const nextContext = tokenizer.context();\n                const emptyLinkedKeyNode = startNode(7 /* NodeTypes.LinkedKey */, nextContext.offset, nextContext.startLoc);\n                emptyLinkedKeyNode.value = '';\n                endNode(emptyLinkedKeyNode, nextContext.offset, nextContext.startLoc);\n                linkedNode.key = emptyLinkedKeyNode;\n                endNode(linkedNode, nextContext.offset, nextContext.startLoc);\n                return {\n                    nextConsumeToken: token,\n                    node: linkedNode\n                };\n            }\n        }\n        endNode(linkedNode, tokenizer.currentOffset(), tokenizer.currentPosition());\n        return {\n            node: linkedNode\n        };\n    }\n    function parseMessage(tokenizer) {\n        const context = tokenizer.context();\n        const startOffset = context.currentType === 1 /* TokenTypes.Pipe */\n            ? tokenizer.currentOffset()\n            : context.offset;\n        const startLoc = context.currentType === 1 /* TokenTypes.Pipe */\n            ? context.endLoc\n            : context.startLoc;\n        const node = startNode(2 /* NodeTypes.Message */, startOffset, startLoc);\n        node.items = [];\n        let nextToken = null;\n        do {\n            const token = nextToken || tokenizer.nextToken();\n            nextToken = null;\n            switch (token.type) {\n                case 0 /* TokenTypes.Text */:\n                    if (token.value == null) {\n                        emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n                    }\n                    node.items.push(parseText(tokenizer, token.value || ''));\n                    break;\n                case 5 /* TokenTypes.List */:\n                    if (token.value == null) {\n                        emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n                    }\n                    node.items.push(parseList(tokenizer, token.value || ''));\n                    break;\n                case 4 /* TokenTypes.Named */:\n                    if (token.value == null) {\n                        emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n                    }\n                    node.items.push(parseNamed(tokenizer, token.value || ''));\n                    break;\n                case 6 /* TokenTypes.Literal */:\n                    if (token.value == null) {\n                        emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n                    }\n                    node.items.push(parseLiteral(tokenizer, token.value || ''));\n                    break;\n                case 7 /* TokenTypes.LinkedAlias */: {\n                    const parsed = parseLinked(tokenizer);\n                    node.items.push(parsed.node);\n                    nextToken = parsed.nextConsumeToken || null;\n                    break;\n                }\n            }\n        } while (context.currentType !== 13 /* TokenTypes.EOF */ &&\n            context.currentType !== 1 /* TokenTypes.Pipe */);\n        // adjust message node loc\n        const endOffset = context.currentType === 1 /* TokenTypes.Pipe */\n            ? context.lastOffset\n            : tokenizer.currentOffset();\n        const endLoc = context.currentType === 1 /* TokenTypes.Pipe */\n            ? context.lastEndLoc\n            : tokenizer.currentPosition();\n        endNode(node, endOffset, endLoc);\n        return node;\n    }\n    function parsePlural(tokenizer, offset, loc, msgNode) {\n        const context = tokenizer.context();\n        let hasEmptyMessage = msgNode.items.length === 0;\n        const node = startNode(1 /* NodeTypes.Plural */, offset, loc);\n        node.cases = [];\n        node.cases.push(msgNode);\n        do {\n            const msg = parseMessage(tokenizer);\n            if (!hasEmptyMessage) {\n                hasEmptyMessage = msg.items.length === 0;\n            }\n            node.cases.push(msg);\n        } while (context.currentType !== 13 /* TokenTypes.EOF */);\n        if (hasEmptyMessage) {\n            emitError(tokenizer, CompileErrorCodes.MUST_HAVE_MESSAGES_IN_PLURAL, loc, 0);\n        }\n        endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n        return node;\n    }\n    function parseResource(tokenizer) {\n        const context = tokenizer.context();\n        const { offset, startLoc } = context;\n        const msgNode = parseMessage(tokenizer);\n        if (context.currentType === 13 /* TokenTypes.EOF */) {\n            return msgNode;\n        }\n        else {\n            return parsePlural(tokenizer, offset, startLoc, msgNode);\n        }\n    }\n    function parse(source) {\n        const tokenizer = createTokenizer(source, assign({}, options));\n        const context = tokenizer.context();\n        const node = startNode(0 /* NodeTypes.Resource */, context.offset, context.startLoc);\n        if (location && node.loc) {\n            node.loc.source = source;\n        }\n        node.body = parseResource(tokenizer);\n        if (options.onCacheKey) {\n            node.cacheKey = options.onCacheKey(source);\n        }\n        // assert whether achieved to EOF\n        if (context.currentType !== 13 /* TokenTypes.EOF */) {\n            emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, source[context.offset] || '');\n        }\n        endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n        return node;\n    }\n    return { parse };\n}\nfunction getTokenCaption(token) {\n    if (token.type === 13 /* TokenTypes.EOF */) {\n        return 'EOF';\n    }\n    const name = (token.value || '').replace(/\\r?\\n/gu, '\\\\n');\n    return name.length > 10 ? name.slice(0, 9) + '…' : name;\n}\n\nfunction createTransformer(ast, options = {} // eslint-disable-line\n) {\n    const _context = {\n        ast,\n        helpers: new Set()\n    };\n    const context = () => _context;\n    const helper = (name) => {\n        _context.helpers.add(name);\n        return name;\n    };\n    return { context, helper };\n}\nfunction traverseNodes(nodes, transformer) {\n    for (let i = 0; i < nodes.length; i++) {\n        traverseNode(nodes[i], transformer);\n    }\n}\nfunction traverseNode(node, transformer) {\n    // TODO: if we need pre-hook of transform, should be implemented to here\n    switch (node.type) {\n        case 1 /* NodeTypes.Plural */:\n            traverseNodes(node.cases, transformer);\n            transformer.helper(\"plural\" /* HelperNameMap.PLURAL */);\n            break;\n        case 2 /* NodeTypes.Message */:\n            traverseNodes(node.items, transformer);\n            break;\n        case 6 /* NodeTypes.Linked */: {\n            const linked = node;\n            traverseNode(linked.key, transformer);\n            transformer.helper(\"linked\" /* HelperNameMap.LINKED */);\n            transformer.helper(\"type\" /* HelperNameMap.TYPE */);\n            break;\n        }\n        case 5 /* NodeTypes.List */:\n            transformer.helper(\"interpolate\" /* HelperNameMap.INTERPOLATE */);\n            transformer.helper(\"list\" /* HelperNameMap.LIST */);\n            break;\n        case 4 /* NodeTypes.Named */:\n            transformer.helper(\"interpolate\" /* HelperNameMap.INTERPOLATE */);\n            transformer.helper(\"named\" /* HelperNameMap.NAMED */);\n            break;\n    }\n    // TODO: if we need post-hook of transform, should be implemented to here\n}\n// transform AST\nfunction transform(ast, options = {} // eslint-disable-line\n) {\n    const transformer = createTransformer(ast);\n    transformer.helper(\"normalize\" /* HelperNameMap.NORMALIZE */);\n    // traverse\n    ast.body && traverseNode(ast.body, transformer);\n    // set meta information\n    const context = transformer.context();\n    ast.helpers = Array.from(context.helpers);\n}\n\nfunction optimize(ast) {\n    const body = ast.body;\n    if (body.type === 2 /* NodeTypes.Message */) {\n        optimizeMessageNode(body);\n    }\n    else {\n        body.cases.forEach(c => optimizeMessageNode(c));\n    }\n    return ast;\n}\nfunction optimizeMessageNode(message) {\n    if (message.items.length === 1) {\n        const item = message.items[0];\n        if (item.type === 3 /* NodeTypes.Text */ || item.type === 9 /* NodeTypes.Literal */) {\n            message.static = item.value;\n            delete item.value; // optimization for size\n        }\n    }\n    else {\n        const values = [];\n        for (let i = 0; i < message.items.length; i++) {\n            const item = message.items[i];\n            if (!(item.type === 3 /* NodeTypes.Text */ || item.type === 9 /* NodeTypes.Literal */)) {\n                break;\n            }\n            if (item.value == null) {\n                break;\n            }\n            values.push(item.value);\n        }\n        if (values.length === message.items.length) {\n            message.static = join(values);\n            for (let i = 0; i < message.items.length; i++) {\n                const item = message.items[i];\n                if (item.type === 3 /* NodeTypes.Text */ || item.type === 9 /* NodeTypes.Literal */) {\n                    delete item.value; // optimization for size\n                }\n            }\n        }\n    }\n}\n\nconst ERROR_DOMAIN$1 = 'minifier';\n/* eslint-disable @typescript-eslint/no-explicit-any */\nfunction minify(node) {\n    node.t = node.type;\n    switch (node.type) {\n        case 0 /* NodeTypes.Resource */: {\n            const resource = node;\n            minify(resource.body);\n            resource.b = resource.body;\n            delete resource.body;\n            break;\n        }\n        case 1 /* NodeTypes.Plural */: {\n            const plural = node;\n            const cases = plural.cases;\n            for (let i = 0; i < cases.length; i++) {\n                minify(cases[i]);\n            }\n            plural.c = cases;\n            delete plural.cases;\n            break;\n        }\n        case 2 /* NodeTypes.Message */: {\n            const message = node;\n            const items = message.items;\n            for (let i = 0; i < items.length; i++) {\n                minify(items[i]);\n            }\n            message.i = items;\n            delete message.items;\n            if (message.static) {\n                message.s = message.static;\n                delete message.static;\n            }\n            break;\n        }\n        case 3 /* NodeTypes.Text */:\n        case 9 /* NodeTypes.Literal */:\n        case 8 /* NodeTypes.LinkedModifier */:\n        case 7 /* NodeTypes.LinkedKey */: {\n            const valueNode = node;\n            if (valueNode.value) {\n                valueNode.v = valueNode.value;\n                delete valueNode.value;\n            }\n            break;\n        }\n        case 6 /* NodeTypes.Linked */: {\n            const linked = node;\n            minify(linked.key);\n            linked.k = linked.key;\n            delete linked.key;\n            if (linked.modifier) {\n                minify(linked.modifier);\n                linked.m = linked.modifier;\n                delete linked.modifier;\n            }\n            break;\n        }\n        case 5 /* NodeTypes.List */: {\n            const list = node;\n            list.i = list.index;\n            delete list.index;\n            break;\n        }\n        case 4 /* NodeTypes.Named */: {\n            const named = node;\n            named.k = named.key;\n            delete named.key;\n            break;\n        }\n        default:\n            {\n                throw createCompileError(CompileErrorCodes.UNHANDLED_MINIFIER_NODE_TYPE, null, {\n                    domain: ERROR_DOMAIN$1,\n                    args: [node.type]\n                });\n            }\n    }\n    delete node.type;\n}\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\n// eslint-disable-next-line @typescript-eslint/triple-slash-reference\n/// <reference types=\"source-map-js\" />\nconst ERROR_DOMAIN = 'parser';\nfunction createCodeGenerator(ast, options) {\n    const { sourceMap, filename, breakLineCode, needIndent: _needIndent } = options;\n    const location = options.location !== false;\n    const _context = {\n        filename,\n        code: '',\n        column: 1,\n        line: 1,\n        offset: 0,\n        map: undefined,\n        breakLineCode,\n        needIndent: _needIndent,\n        indentLevel: 0\n    };\n    if (location && ast.loc) {\n        _context.source = ast.loc.source;\n    }\n    const context = () => _context;\n    function push(code, node) {\n        _context.code += code;\n    }\n    function _newline(n, withBreakLine = true) {\n        const _breakLineCode = withBreakLine ? breakLineCode : '';\n        push(_needIndent ? _breakLineCode + `  `.repeat(n) : _breakLineCode);\n    }\n    function indent(withNewLine = true) {\n        const level = ++_context.indentLevel;\n        withNewLine && _newline(level);\n    }\n    function deindent(withNewLine = true) {\n        const level = --_context.indentLevel;\n        withNewLine && _newline(level);\n    }\n    function newline() {\n        _newline(_context.indentLevel);\n    }\n    const helper = (key) => `_${key}`;\n    const needIndent = () => _context.needIndent;\n    return {\n        context,\n        push,\n        indent,\n        deindent,\n        newline,\n        helper,\n        needIndent\n    };\n}\nfunction generateLinkedNode(generator, node) {\n    const { helper } = generator;\n    generator.push(`${helper(\"linked\" /* HelperNameMap.LINKED */)}(`);\n    generateNode(generator, node.key);\n    if (node.modifier) {\n        generator.push(`, `);\n        generateNode(generator, node.modifier);\n        generator.push(`, _type`);\n    }\n    else {\n        generator.push(`, undefined, _type`);\n    }\n    generator.push(`)`);\n}\nfunction generateMessageNode(generator, node) {\n    const { helper, needIndent } = generator;\n    generator.push(`${helper(\"normalize\" /* HelperNameMap.NORMALIZE */)}([`);\n    generator.indent(needIndent());\n    const length = node.items.length;\n    for (let i = 0; i < length; i++) {\n        generateNode(generator, node.items[i]);\n        if (i === length - 1) {\n            break;\n        }\n        generator.push(', ');\n    }\n    generator.deindent(needIndent());\n    generator.push('])');\n}\nfunction generatePluralNode(generator, node) {\n    const { helper, needIndent } = generator;\n    if (node.cases.length > 1) {\n        generator.push(`${helper(\"plural\" /* HelperNameMap.PLURAL */)}([`);\n        generator.indent(needIndent());\n        const length = node.cases.length;\n        for (let i = 0; i < length; i++) {\n            generateNode(generator, node.cases[i]);\n            if (i === length - 1) {\n                break;\n            }\n            generator.push(', ');\n        }\n        generator.deindent(needIndent());\n        generator.push(`])`);\n    }\n}\nfunction generateResource(generator, node) {\n    if (node.body) {\n        generateNode(generator, node.body);\n    }\n    else {\n        generator.push('null');\n    }\n}\nfunction generateNode(generator, node) {\n    const { helper } = generator;\n    switch (node.type) {\n        case 0 /* NodeTypes.Resource */:\n            generateResource(generator, node);\n            break;\n        case 1 /* NodeTypes.Plural */:\n            generatePluralNode(generator, node);\n            break;\n        case 2 /* NodeTypes.Message */:\n            generateMessageNode(generator, node);\n            break;\n        case 6 /* NodeTypes.Linked */:\n            generateLinkedNode(generator, node);\n            break;\n        case 8 /* NodeTypes.LinkedModifier */:\n            generator.push(JSON.stringify(node.value), node);\n            break;\n        case 7 /* NodeTypes.LinkedKey */:\n            generator.push(JSON.stringify(node.value), node);\n            break;\n        case 5 /* NodeTypes.List */:\n            generator.push(`${helper(\"interpolate\" /* HelperNameMap.INTERPOLATE */)}(${helper(\"list\" /* HelperNameMap.LIST */)}(${node.index}))`, node);\n            break;\n        case 4 /* NodeTypes.Named */:\n            generator.push(`${helper(\"interpolate\" /* HelperNameMap.INTERPOLATE */)}(${helper(\"named\" /* HelperNameMap.NAMED */)}(${JSON.stringify(node.key)}))`, node);\n            break;\n        case 9 /* NodeTypes.Literal */:\n            generator.push(JSON.stringify(node.value), node);\n            break;\n        case 3 /* NodeTypes.Text */:\n            generator.push(JSON.stringify(node.value), node);\n            break;\n        default:\n            {\n                throw createCompileError(CompileErrorCodes.UNHANDLED_CODEGEN_NODE_TYPE, null, {\n                    domain: ERROR_DOMAIN,\n                    args: [node.type]\n                });\n            }\n    }\n}\n// generate code from AST\nconst generate = (ast, options = {}) => {\n    const mode = isString(options.mode) ? options.mode : 'normal';\n    const filename = isString(options.filename)\n        ? options.filename\n        : 'message.intl';\n    const sourceMap = !!options.sourceMap;\n    // prettier-ignore\n    const breakLineCode = options.breakLineCode != null\n        ? options.breakLineCode\n        : mode === 'arrow'\n            ? ';'\n            : '\\n';\n    const needIndent = options.needIndent ? options.needIndent : mode !== 'arrow';\n    const helpers = ast.helpers || [];\n    const generator = createCodeGenerator(ast, {\n        mode,\n        filename,\n        sourceMap,\n        breakLineCode,\n        needIndent\n    });\n    generator.push(mode === 'normal' ? `function __msg__ (ctx) {` : `(ctx) => {`);\n    generator.indent(needIndent);\n    if (helpers.length > 0) {\n        generator.push(`const { ${join(helpers.map(s => `${s}: _${s}`), ', ')} } = ctx`);\n        generator.newline();\n    }\n    generator.push(`return `);\n    generateNode(generator, ast);\n    generator.deindent(needIndent);\n    generator.push(`}`);\n    delete ast.helpers;\n    const { code, map } = generator.context();\n    return {\n        ast,\n        code,\n        map: map ? map.toJSON() : undefined // eslint-disable-line @typescript-eslint/no-explicit-any\n    };\n};\n\nfunction baseCompile(source, options = {}) {\n    const assignedOptions = assign({}, options);\n    const jit = !!assignedOptions.jit;\n    const enalbeMinify = !!assignedOptions.minify;\n    const enambeOptimize = assignedOptions.optimize == null ? true : assignedOptions.optimize;\n    // parse source codes\n    const parser = createParser(assignedOptions);\n    const ast = parser.parse(source);\n    if (!jit) {\n        // transform ASTs\n        transform(ast, assignedOptions);\n        // generate javascript codes\n        return generate(ast, assignedOptions);\n    }\n    else {\n        // optimize ASTs\n        enambeOptimize && optimize(ast);\n        // minimize ASTs\n        enalbeMinify && minify(ast);\n        // In JIT mode, no ast transform, no code generation.\n        return { ast, code: '' };\n    }\n}\n\nexport { CompileErrorCodes, ERROR_DOMAIN$2 as ERROR_DOMAIN, LOCATION_STUB, baseCompile, createCompileError, createLocation, createParser, createPosition, defaultOnError, detectHtmlTag, errorMessages };\n"],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA,MAAMA,aAAa,GAAG;EAClBC,KAAK,EAAE;IAAEC,IAAI,EAAE,CAAC;IAAEC,MAAM,EAAE,CAAC;IAAEC,MAAM,EAAE;EAAE,CAAC;EACxCC,GAAG,EAAE;IAAEH,IAAI,EAAE,CAAC;IAAEC,MAAM,EAAE,CAAC;IAAEC,MAAM,EAAE;EAAE;AACzC,CAAC;AACD,SAASE,cAAcA,CAACJ,IAAI,EAAEC,MAAM,EAAEC,MAAM,EAAE;EAC1C,OAAO;IAAEF,IAAI;IAAEC,MAAM;IAAEC;EAAO,CAAC;AACnC;AACA,SAASG,cAAcA,CAACN,KAAK,EAAEI,GAAG,EAAEG,MAAM,EAAE;EACxC,MAAMC,GAAG,GAAG;IAAER,KAAK;IAAEI;EAAI,CAAC;EAC1B,IAAIG,MAAM,IAAI,IAAI,EAAE;IAChBC,GAAG,CAACD,MAAM,GAAGA,MAAM;EACvB;EACA,OAAOC,GAAG;AACd;;AAEA;AACA;AACA;AACA;AACA,MAAMC,OAAO,GAAG,qBAAqB;AACrC;AACA,SAASC,MAAMA,CAACC,OAAO,EAAE,GAAGC,IAAI,EAAE;EAC9B,IAAIA,IAAI,CAACC,MAAM,KAAK,CAAC,IAAIC,QAAQ,CAACF,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;IACxCA,IAAI,GAAGA,IAAI,CAAC,CAAC,CAAC;EAClB;EACA,IAAI,CAACA,IAAI,IAAI,CAACA,IAAI,CAACG,cAAc,EAAE;IAC/BH,IAAI,GAAG,CAAC,CAAC;EACb;EACA,OAAOD,OAAO,CAACK,OAAO,CAACP,OAAO,EAAE,CAACQ,KAAK,EAAEC,UAAU,KAAK;IACnD,OAAON,IAAI,CAACG,cAAc,CAACG,UAAU,CAAC,GAAGN,IAAI,CAACM,UAAU,CAAC,GAAG,EAAE;EAClE,CAAC,CAAC;AACN;AACA,MAAMC,MAAM,GAAGC,MAAM,CAACD,MAAM;AAC5B,MAAME,QAAQ,GAAIC,GAAG,IAAK,OAAOA,GAAG,KAAK,QAAQ;AACjD;AACA,MAAMR,QAAQ,GAAIQ,GAAG,IAAKA,GAAG,KAAK,IAAI,IAAI,OAAOA,GAAG,KAAK,QAAQ;AACjE,SAASC,IAAIA,CAACC,KAAK,EAAEC,SAAS,GAAG,EAAE,EAAE;EACjC,OAAOD,KAAK,CAACE,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,EAAEC,KAAK,KAAMA,KAAK,KAAK,CAAC,GAAGF,GAAG,GAAGC,IAAI,GAAGD,GAAG,GAAGF,SAAS,GAAGG,IAAK,EAAE,EAAE,CAAC;AACtG;AAEA,MAAME,iBAAiB,GAAG;EACtB;EACAC,cAAc,EAAE,CAAC;EACjBC,4BAA4B,EAAE,CAAC;EAC/BC,wCAAwC,EAAE,CAAC;EAC3CC,uBAAuB,EAAE,CAAC;EAC1BC,+BAA+B,EAAE,CAAC;EAClCC,wBAAwB,EAAE,CAAC;EAC3BC,0BAA0B,EAAE,CAAC;EAC7BC,iBAAiB,EAAE,CAAC;EACpBC,0BAA0B,EAAE,CAAC;EAC7BC,qBAAqB,EAAE,EAAE;EACzB;EACAC,4BAA4B,EAAE,EAAE;EAChCC,gCAAgC,EAAE,EAAE;EACpCC,2BAA2B,EAAE,EAAE;EAC/BC,2BAA2B,EAAE,EAAE;EAC/B;EACAC,2BAA2B,EAAE,EAAE;EAC/B;EACAC,4BAA4B,EAAE,EAAE;EAChC;EACA;EACA;EACAC,gBAAgB,EAAE;AACtB,CAAC;AACD;AACA,MAAMC,aAAa,GAAG;EAClB;EACA,CAAClB,iBAAiB,CAACC,cAAc,GAAI,uBAAsB;EAC3D,CAACD,iBAAiB,CAACE,4BAA4B,GAAI,qCAAoC;EACvF,CAACF,iBAAiB,CAACG,wCAAwC,GAAI,0CAAyC;EACxG,CAACH,iBAAiB,CAACI,uBAAuB,GAAI,gCAA+B;EAC7E,CAACJ,iBAAiB,CAACK,+BAA+B,GAAI,sCAAqC;EAC3F,CAACL,iBAAiB,CAACM,wBAAwB,GAAI,0BAAyB;EACxE,CAACN,iBAAiB,CAACO,0BAA0B,GAAI,4BAA2B;EAC5E,CAACP,iBAAiB,CAACQ,iBAAiB,GAAI,mBAAkB;EAC1D,CAACR,iBAAiB,CAACS,0BAA0B,GAAI,8BAA6B;EAC9E,CAACT,iBAAiB,CAACU,qBAAqB,GAAI,uBAAsB;EAClE;EACA,CAACV,iBAAiB,CAACW,4BAA4B,GAAI,2BAA0B;EAC7E,CAACX,iBAAiB,CAACY,gCAAgC,GAAI,kCAAiC;EACxF,CAACZ,iBAAiB,CAACa,2BAA2B,GAAI,6BAA4B;EAC9E,CAACb,iBAAiB,CAACc,2BAA2B,GAAI,6CAA4C;EAC9F;EACA,CAACd,iBAAiB,CAACe,2BAA2B,GAAI,oCAAmC;EACrF;EACA,CAACf,iBAAiB,CAACgB,4BAA4B,GAAI;AACvD,CAAC;AACD,SAASG,kBAAkBA,CAACC,IAAI,EAAE1C,GAAG,EAAE2C,OAAO,GAAG,CAAC,CAAC,EAAE;EACjD,MAAM;IAAEC,MAAM;IAAEC,QAAQ;IAAEzC;EAAK,CAAC,GAAGuC,OAAO;EAC1C,MAAMG,GAAG,GAAG5C,MAAM,CAAC,CAAC2C,QAAQ,IAAIL,aAAa,EAAEE,IAAI,CAAC,IAAI,EAAE,EAAE,IAAItC,IAAI,IAAI,EAAE,CAAC,CAAC;EAE5E,MAAM2C,KAAK,GAAG,IAAIC,WAAW,CAACC,MAAM,CAACH,GAAG,CAAC,CAAC;EAC1CC,KAAK,CAACL,IAAI,GAAGA,IAAI;EACjB,IAAI1C,GAAG,EAAE;IACL+C,KAAK,CAACG,QAAQ,GAAGlD,GAAG;EACxB;EACA+C,KAAK,CAACH,MAAM,GAAGA,MAAM;EACrB,OAAOG,KAAK;AAChB;AACA;AACA,SAASI,cAAcA,CAACJ,KAAK,EAAE;EAC3B,MAAMA,KAAK;AACf;;AAEA;AACA,MAAMK,WAAW,GAAG,yBAAyB;AAC7C,MAAMC,aAAa,GAAItD,MAAM,IAAKqD,WAAW,CAACE,IAAI,CAACvD,MAAM,CAAC;AAE1D,MAAMwD,OAAO,GAAG,GAAG;AACnB,MAAMC,OAAO,GAAG,IAAI;AACpB,MAAMC,OAAO,GAAG,IAAI;AACpB,MAAMC,OAAO,GAAGT,MAAM,CAACU,YAAY,CAAC,MAAM,CAAC;AAC3C,MAAMC,OAAO,GAAGX,MAAM,CAACU,YAAY,CAAC,MAAM,CAAC;AAC3C,SAASE,aAAaA,CAAC1C,GAAG,EAAE;EACxB,MAAM2C,IAAI,GAAG3C,GAAG;EAChB,IAAI4C,MAAM,GAAG,CAAC;EACd,IAAIC,KAAK,GAAG,CAAC;EACb,IAAIC,OAAO,GAAG,CAAC;EACf,IAAIC,WAAW,GAAG,CAAC;EACnB,MAAMC,MAAM,GAAI9C,KAAK,IAAKyC,IAAI,CAACzC,KAAK,CAAC,KAAKmC,OAAO,IAAIM,IAAI,CAACzC,KAAK,GAAG,CAAC,CAAC,KAAKoC,OAAO;EAChF,MAAMW,IAAI,GAAI/C,KAAK,IAAKyC,IAAI,CAACzC,KAAK,CAAC,KAAKoC,OAAO;EAC/C,MAAMY,IAAI,GAAIhD,KAAK,IAAKyC,IAAI,CAACzC,KAAK,CAAC,KAAKuC,OAAO;EAC/C,MAAMU,IAAI,GAAIjD,KAAK,IAAKyC,IAAI,CAACzC,KAAK,CAAC,KAAKqC,OAAO;EAC/C,MAAMa,SAAS,GAAIlD,KAAK,IAAK8C,MAAM,CAAC9C,KAAK,CAAC,IAAI+C,IAAI,CAAC/C,KAAK,CAAC,IAAIgD,IAAI,CAAChD,KAAK,CAAC,IAAIiD,IAAI,CAACjD,KAAK,CAAC;EACvF,MAAMA,KAAK,GAAGA,CAAA,KAAM0C,MAAM;EAC1B,MAAMtE,IAAI,GAAGA,CAAA,KAAMuE,KAAK;EACxB,MAAMtE,MAAM,GAAGA,CAAA,KAAMuE,OAAO;EAC5B,MAAMO,UAAU,GAAGA,CAAA,KAAMN,WAAW;EACpC,MAAMO,MAAM,GAAI9E,MAAM,IAAKwE,MAAM,CAACxE,MAAM,CAAC,IAAI0E,IAAI,CAAC1E,MAAM,CAAC,IAAI2E,IAAI,CAAC3E,MAAM,CAAC,GAAG8D,OAAO,GAAGK,IAAI,CAACnE,MAAM,CAAC;EAClG,MAAM+E,WAAW,GAAGA,CAAA,KAAMD,MAAM,CAACV,MAAM,CAAC;EACxC,MAAMY,WAAW,GAAGA,CAAA,KAAMF,MAAM,CAACV,MAAM,GAAGG,WAAW,CAAC;EACtD,SAASU,IAAIA,CAAA,EAAG;IACZV,WAAW,GAAG,CAAC;IACf,IAAIK,SAAS,CAACR,MAAM,CAAC,EAAE;MACnBC,KAAK,EAAE;MACPC,OAAO,GAAG,CAAC;IACf;IACA,IAAIE,MAAM,CAACJ,MAAM,CAAC,EAAE;MAChBA,MAAM,EAAE;IACZ;IACAA,MAAM,EAAE;IACRE,OAAO,EAAE;IACT,OAAOH,IAAI,CAACC,MAAM,CAAC;EACvB;EACA,SAASc,IAAIA,CAAA,EAAG;IACZ,IAAIV,MAAM,CAACJ,MAAM,GAAGG,WAAW,CAAC,EAAE;MAC9BA,WAAW,EAAE;IACjB;IACAA,WAAW,EAAE;IACb,OAAOJ,IAAI,CAACC,MAAM,GAAGG,WAAW,CAAC;EACrC;EACA,SAASY,KAAKA,CAAA,EAAG;IACbf,MAAM,GAAG,CAAC;IACVC,KAAK,GAAG,CAAC;IACTC,OAAO,GAAG,CAAC;IACXC,WAAW,GAAG,CAAC;EACnB;EACA,SAASa,SAASA,CAACpF,MAAM,GAAG,CAAC,EAAE;IAC3BuE,WAAW,GAAGvE,MAAM;EACxB;EACA,SAASqF,UAAUA,CAAA,EAAG;IAClB,MAAMC,MAAM,GAAGlB,MAAM,GAAGG,WAAW;IACnC,OAAOe,MAAM,KAAKlB,MAAM,EAAE;MACtBa,IAAI,CAAC,CAAC;IACV;IACAV,WAAW,GAAG,CAAC;EACnB;EACA,OAAO;IACH7C,KAAK;IACL5B,IAAI;IACJC,MAAM;IACN8E,UAAU;IACVC,MAAM;IACNC,WAAW;IACXC,WAAW;IACXC,IAAI;IACJC,IAAI;IACJC,KAAK;IACLC,SAAS;IACTC;EACJ,CAAC;AACL;AAEA,MAAME,GAAG,GAAGC,SAAS;AACrB,MAAMC,GAAG,GAAG,GAAG;AACf,MAAMC,iBAAiB,GAAG,GAAG;AAC7B,MAAMC,cAAc,GAAG,WAAW;AAClC,SAASC,eAAeA,CAACxF,MAAM,EAAE4C,OAAO,GAAG,CAAC,CAAC,EAAE;EAC3C,MAAMO,QAAQ,GAAGP,OAAO,CAACO,QAAQ,KAAK,KAAK;EAC3C,MAAMsC,KAAK,GAAG3B,aAAa,CAAC9D,MAAM,CAAC;EACnC,MAAM0F,aAAa,GAAGA,CAAA,KAAMD,KAAK,CAACnE,KAAK,CAAC,CAAC;EACzC,MAAMqE,eAAe,GAAGA,CAAA,KAAM7F,cAAc,CAAC2F,KAAK,CAAC/F,IAAI,CAAC,CAAC,EAAE+F,KAAK,CAAC9F,MAAM,CAAC,CAAC,EAAE8F,KAAK,CAACnE,KAAK,CAAC,CAAC,CAAC;EACzF,MAAMsE,QAAQ,GAAGD,eAAe,CAAC,CAAC;EAClC,MAAME,WAAW,GAAGH,aAAa,CAAC,CAAC;EACnC,MAAMI,QAAQ,GAAG;IACbC,WAAW,EAAE,EAAE,CAAC;IAChBnG,MAAM,EAAEiG,WAAW;IACnBG,QAAQ,EAAEJ,QAAQ;IAClBK,MAAM,EAAEL,QAAQ;IAChBM,QAAQ,EAAE,EAAE,CAAC;IACbC,UAAU,EAAEN,WAAW;IACvBO,YAAY,EAAER,QAAQ;IACtBS,UAAU,EAAET,QAAQ;IACpBU,SAAS,EAAE,CAAC;IACZC,QAAQ,EAAE,KAAK;IACfC,IAAI,EAAE;EACV,CAAC;EACD,MAAMC,OAAO,GAAGA,CAAA,KAAMX,QAAQ;EAC9B,MAAM;IAAEY;EAAQ,CAAC,GAAG9D,OAAO;EAC3B,SAAS+D,SAASA,CAAChE,IAAI,EAAEiE,GAAG,EAAEhH,MAAM,EAAE,GAAGS,IAAI,EAAE;IAC3C,MAAMwG,GAAG,GAAGJ,OAAO,CAAC,CAAC;IACrBG,GAAG,CAACjH,MAAM,IAAIC,MAAM;IACpBgH,GAAG,CAAChH,MAAM,IAAIA,MAAM;IACpB,IAAI8G,OAAO,EAAE;MACT,MAAMzG,GAAG,GAAGkD,QAAQ,GAAGpD,cAAc,CAAC8G,GAAG,CAACb,QAAQ,EAAEY,GAAG,CAAC,GAAG,IAAI;MAC/D,MAAME,GAAG,GAAGpE,kBAAkB,CAACC,IAAI,EAAE1C,GAAG,EAAE;QACtC4C,MAAM,EAAE0C,cAAc;QACtBlF;MACJ,CAAC,CAAC;MACFqG,OAAO,CAACI,GAAG,CAAC;IAChB;EACJ;EACA,SAASC,QAAQA,CAACN,OAAO,EAAEO,IAAI,EAAEC,KAAK,EAAE;IACpCR,OAAO,CAACR,MAAM,GAAGN,eAAe,CAAC,CAAC;IAClCc,OAAO,CAACV,WAAW,GAAGiB,IAAI;IAC1B,MAAME,KAAK,GAAG;MAAEF;IAAK,CAAC;IACtB,IAAI7D,QAAQ,EAAE;MACV+D,KAAK,CAACjH,GAAG,GAAGF,cAAc,CAAC0G,OAAO,CAACT,QAAQ,EAAES,OAAO,CAACR,MAAM,CAAC;IAChE;IACA,IAAIgB,KAAK,IAAI,IAAI,EAAE;MACfC,KAAK,CAACD,KAAK,GAAGA,KAAK;IACvB;IACA,OAAOC,KAAK;EAChB;EACA,MAAMC,WAAW,GAAIV,OAAO,IAAKM,QAAQ,CAACN,OAAO,EAAE,EAAE,CAAC,oBAAoB,CAAC;EAC3E,SAASW,GAAGA,CAACC,IAAI,EAAEC,EAAE,EAAE;IACnB,IAAID,IAAI,CAAC1C,WAAW,CAAC,CAAC,KAAK2C,EAAE,EAAE;MAC3BD,IAAI,CAACxC,IAAI,CAAC,CAAC;MACX,OAAOyC,EAAE;IACb,CAAC,MACI;MACDX,SAAS,CAACpF,iBAAiB,CAACC,cAAc,EAAEmE,eAAe,CAAC,CAAC,EAAE,CAAC,EAAE2B,EAAE,CAAC;MACrE,OAAO,EAAE;IACb;EACJ;EACA,SAASC,UAAUA,CAACF,IAAI,EAAE;IACtB,IAAIG,GAAG,GAAG,EAAE;IACZ,OAAOH,IAAI,CAACzC,WAAW,CAAC,CAAC,KAAKpB,OAAO,IAAI6D,IAAI,CAACzC,WAAW,CAAC,CAAC,KAAKlB,OAAO,EAAE;MACrE8D,GAAG,IAAIH,IAAI,CAACzC,WAAW,CAAC,CAAC;MACzByC,IAAI,CAACvC,IAAI,CAAC,CAAC;IACf;IACA,OAAO0C,GAAG;EACd;EACA,SAASC,UAAUA,CAACJ,IAAI,EAAE;IACtB,MAAMG,GAAG,GAAGD,UAAU,CAACF,IAAI,CAAC;IAC5BA,IAAI,CAACpC,UAAU,CAAC,CAAC;IACjB,OAAOuC,GAAG;EACd;EACA,SAASE,iBAAiBA,CAACJ,EAAE,EAAE;IAC3B,IAAIA,EAAE,KAAKnC,GAAG,EAAE;MACZ,OAAO,KAAK;IAChB;IACA,MAAMwC,EAAE,GAAGL,EAAE,CAACM,UAAU,CAAC,CAAC,CAAC;IAC3B,OAASD,EAAE,IAAI,EAAE,IAAIA,EAAE,IAAI,GAAG;IAAK;IAC9BA,EAAE,IAAI,EAAE,IAAIA,EAAE,IAAI,EAAG;IAAI;IAC1BA,EAAE,KAAK,EAAE,CAAC;IAAA;EAElB;EACA,SAASE,aAAaA,CAACP,EAAE,EAAE;IACvB,IAAIA,EAAE,KAAKnC,GAAG,EAAE;MACZ,OAAO,KAAK;IAChB;IACA,MAAMwC,EAAE,GAAGL,EAAE,CAACM,UAAU,CAAC,CAAC,CAAC;IAC3B,OAAOD,EAAE,IAAI,EAAE,IAAIA,EAAE,IAAI,EAAE,CAAC,CAAC;EACjC;EACA,SAASG,sBAAsBA,CAACT,IAAI,EAAEZ,OAAO,EAAE;IAC3C,MAAM;MAAEV;IAAY,CAAC,GAAGU,OAAO;IAC/B,IAAIV,WAAW,KAAK,CAAC,CAAC,4BAA4B;MAC9C,OAAO,KAAK;IAChB;IACAwB,UAAU,CAACF,IAAI,CAAC;IAChB,MAAMU,GAAG,GAAGL,iBAAiB,CAACL,IAAI,CAACzC,WAAW,CAAC,CAAC,CAAC;IACjDyC,IAAI,CAACrC,SAAS,CAAC,CAAC;IAChB,OAAO+C,GAAG;EACd;EACA,SAASC,qBAAqBA,CAACX,IAAI,EAAEZ,OAAO,EAAE;IAC1C,MAAM;MAAEV;IAAY,CAAC,GAAGU,OAAO;IAC/B,IAAIV,WAAW,KAAK,CAAC,CAAC,4BAA4B;MAC9C,OAAO,KAAK;IAChB;IACAwB,UAAU,CAACF,IAAI,CAAC;IAChB,MAAMC,EAAE,GAAGD,IAAI,CAACzC,WAAW,CAAC,CAAC,KAAK,GAAG,GAAGyC,IAAI,CAACvC,IAAI,CAAC,CAAC,GAAGuC,IAAI,CAACzC,WAAW,CAAC,CAAC;IACxE,MAAMmD,GAAG,GAAGF,aAAa,CAACP,EAAE,CAAC;IAC7BD,IAAI,CAACrC,SAAS,CAAC,CAAC;IAChB,OAAO+C,GAAG;EACd;EACA,SAASE,cAAcA,CAACZ,IAAI,EAAEZ,OAAO,EAAE;IACnC,MAAM;MAAEV;IAAY,CAAC,GAAGU,OAAO;IAC/B,IAAIV,WAAW,KAAK,CAAC,CAAC,4BAA4B;MAC9C,OAAO,KAAK;IAChB;IACAwB,UAAU,CAACF,IAAI,CAAC;IAChB,MAAMU,GAAG,GAAGV,IAAI,CAACzC,WAAW,CAAC,CAAC,KAAKU,iBAAiB;IACpD+B,IAAI,CAACrC,SAAS,CAAC,CAAC;IAChB,OAAO+C,GAAG;EACd;EACA,SAASG,gBAAgBA,CAACb,IAAI,EAAEZ,OAAO,EAAE;IACrC,MAAM;MAAEV;IAAY,CAAC,GAAGU,OAAO;IAC/B,IAAIV,WAAW,KAAK,CAAC,CAAC,8BAA8B;MAChD,OAAO,KAAK;IAChB;IACAwB,UAAU,CAACF,IAAI,CAAC;IAChB,MAAMU,GAAG,GAAGV,IAAI,CAACzC,WAAW,CAAC,CAAC,KAAK,GAAG,CAAC;IACvCyC,IAAI,CAACrC,SAAS,CAAC,CAAC;IAChB,OAAO+C,GAAG;EACd;EACA,SAASI,qBAAqBA,CAACd,IAAI,EAAEZ,OAAO,EAAE;IAC1C,MAAM;MAAEV;IAAY,CAAC,GAAGU,OAAO;IAC/B,IAAIV,WAAW,KAAK,CAAC,CAAC,4BAA4B;MAC9C,OAAO,KAAK;IAChB;IACAwB,UAAU,CAACF,IAAI,CAAC;IAChB,MAAMU,GAAG,GAAGL,iBAAiB,CAACL,IAAI,CAACzC,WAAW,CAAC,CAAC,CAAC;IACjDyC,IAAI,CAACrC,SAAS,CAAC,CAAC;IAChB,OAAO+C,GAAG;EACd;EACA,SAASK,sBAAsBA,CAACf,IAAI,EAAEZ,OAAO,EAAE;IAC3C,MAAM;MAAEV;IAAY,CAAC,GAAGU,OAAO;IAC/B,IAAI,EAAEV,WAAW,KAAK,CAAC,CAAC,gCACpBA,WAAW,KAAK,EAAE,CAAC,gCAAgC,EAAE;MACrD,OAAO,KAAK;IAChB;IACAwB,UAAU,CAACF,IAAI,CAAC;IAChB,MAAMU,GAAG,GAAGV,IAAI,CAACzC,WAAW,CAAC,CAAC,KAAK,GAAG,CAAC;IACvCyC,IAAI,CAACrC,SAAS,CAAC,CAAC;IAChB,OAAO+C,GAAG;EACd;EACA,SAASM,kBAAkBA,CAAChB,IAAI,EAAEZ,OAAO,EAAE;IACvC,MAAM;MAAEV;IAAY,CAAC,GAAGU,OAAO;IAC/B,IAAIV,WAAW,KAAK,CAAC,CAAC,kCAAkC;MACpD,OAAO,KAAK;IAChB;IACA,MAAMuC,EAAE,GAAGA,CAAA,KAAM;MACb,MAAMhB,EAAE,GAAGD,IAAI,CAACzC,WAAW,CAAC,CAAC;MAC7B,IAAI0C,EAAE,KAAK,GAAG,CAAC,4BAA4B;QACvC,OAAOI,iBAAiB,CAACL,IAAI,CAACvC,IAAI,CAAC,CAAC,CAAC;MACzC,CAAC,MACI,IAAIwC,EAAE,KAAK,GAAG,CAAC,gCAChBA,EAAE,KAAK,GAAG,CAAC,yBACXA,EAAE,KAAK,GAAG,CAAC,oCACXA,EAAE,KAAK,GAAG,CAAC,8BACXA,EAAE,KAAK9D,OAAO,IACd,CAAC8D,EAAE,EAAE;QACL,OAAO,KAAK;MAChB,CAAC,MACI,IAAIA,EAAE,KAAK5D,OAAO,EAAE;QACrB2D,IAAI,CAACvC,IAAI,CAAC,CAAC;QACX,OAAOwD,EAAE,CAAC,CAAC;MACf,CAAC,MACI;QACD;QACA,OAAOC,WAAW,CAAClB,IAAI,EAAE,KAAK,CAAC;MACnC;IACJ,CAAC;IACD,MAAMU,GAAG,GAAGO,EAAE,CAAC,CAAC;IAChBjB,IAAI,CAACrC,SAAS,CAAC,CAAC;IAChB,OAAO+C,GAAG;EACd;EACA,SAASS,aAAaA,CAACnB,IAAI,EAAE;IACzBE,UAAU,CAACF,IAAI,CAAC;IAChB,MAAMU,GAAG,GAAGV,IAAI,CAACzC,WAAW,CAAC,CAAC,KAAK,GAAG,CAAC;IACvCyC,IAAI,CAACrC,SAAS,CAAC,CAAC;IAChB,OAAO+C,GAAG;EACd;EACA,SAASQ,WAAWA,CAAClB,IAAI,EAAEtC,KAAK,GAAG,IAAI,EAAE;IACrC,MAAMuD,EAAE,GAAGA,CAACG,QAAQ,GAAG,KAAK,EAAEC,IAAI,GAAG,EAAE,KAAK;MACxC,MAAMpB,EAAE,GAAGD,IAAI,CAACzC,WAAW,CAAC,CAAC;MAC7B,IAAI0C,EAAE,KAAK,GAAG,CAAC,4BAA4B;QACvC,OAAOmB,QAAQ;MACnB,CAAC,MACI,IAAInB,EAAE,KAAK,GAAG,CAAC,gCAAgC,CAACA,EAAE,EAAE;QACrD,OAAOmB,QAAQ;MACnB,CAAC,MACI,IAAInB,EAAE,KAAK,GAAG,CAAC,uBAAuB;QACvC,OAAO,EAAEoB,IAAI,KAAKlF,OAAO,IAAIkF,IAAI,KAAKhF,OAAO,CAAC;MAClD,CAAC,MACI,IAAI4D,EAAE,KAAK9D,OAAO,EAAE;QACrB6D,IAAI,CAACvC,IAAI,CAAC,CAAC;QACX,OAAOwD,EAAE,CAAC,IAAI,EAAE9E,OAAO,CAAC;MAC5B,CAAC,MACI,IAAI8D,EAAE,KAAK5D,OAAO,EAAE;QACrB2D,IAAI,CAACvC,IAAI,CAAC,CAAC;QACX,OAAOwD,EAAE,CAAC,IAAI,EAAE5E,OAAO,CAAC;MAC5B,CAAC,MACI;QACD,OAAO,IAAI;MACf;IACJ,CAAC;IACD,MAAMqE,GAAG,GAAGO,EAAE,CAAC,CAAC;IAChBvD,KAAK,IAAIsC,IAAI,CAACrC,SAAS,CAAC,CAAC;IACzB,OAAO+C,GAAG;EACd;EACA,SAASY,QAAQA,CAACtB,IAAI,EAAEiB,EAAE,EAAE;IACxB,MAAMhB,EAAE,GAAGD,IAAI,CAAC1C,WAAW,CAAC,CAAC;IAC7B,IAAI2C,EAAE,KAAKnC,GAAG,EAAE;MACZ,OAAOA,GAAG;IACd;IACA,IAAImD,EAAE,CAAChB,EAAE,CAAC,EAAE;MACRD,IAAI,CAACxC,IAAI,CAAC,CAAC;MACX,OAAOyC,EAAE;IACb;IACA,OAAO,IAAI;EACf;EACA,SAASsB,YAAYA,CAACtB,EAAE,EAAE;IACtB,MAAMK,EAAE,GAAGL,EAAE,CAACM,UAAU,CAAC,CAAC,CAAC;IAC3B,OAASD,EAAE,IAAI,EAAE,IAAIA,EAAE,IAAI,GAAG;IAAK;IAC9BA,EAAE,IAAI,EAAE,IAAIA,EAAE,IAAI,EAAG;IAAI;IACzBA,EAAE,IAAI,EAAE,IAAIA,EAAE,IAAI,EAAG;IAAI;IAC1BA,EAAE,KAAK,EAAE;IAAI;IACbA,EAAE,KAAK,EAAE,CAAC;IAAA;EAElB;EACA,SAASkB,kBAAkBA,CAACxB,IAAI,EAAE;IAC9B,OAAOsB,QAAQ,CAACtB,IAAI,EAAEuB,YAAY,CAAC;EACvC;EACA,SAASE,iBAAiBA,CAACxB,EAAE,EAAE;IAC3B,MAAMK,EAAE,GAAGL,EAAE,CAACM,UAAU,CAAC,CAAC,CAAC;IAC3B,OAASD,EAAE,IAAI,EAAE,IAAIA,EAAE,IAAI,GAAG;IAAK;IAC9BA,EAAE,IAAI,EAAE,IAAIA,EAAE,IAAI,EAAG;IAAI;IACzBA,EAAE,IAAI,EAAE,IAAIA,EAAE,IAAI,EAAG;IAAI;IAC1BA,EAAE,KAAK,EAAE;IAAI;IACbA,EAAE,KAAK,EAAE;IAAI;IACbA,EAAE,KAAK,EAAE,CAAC;IAAA;EAElB;EACA,SAASoB,uBAAuBA,CAAC1B,IAAI,EAAE;IACnC,OAAOsB,QAAQ,CAACtB,IAAI,EAAEyB,iBAAiB,CAAC;EAC5C;EACA,SAASE,OAAOA,CAAC1B,EAAE,EAAE;IACjB,MAAMK,EAAE,GAAGL,EAAE,CAACM,UAAU,CAAC,CAAC,CAAC;IAC3B,OAAOD,EAAE,IAAI,EAAE,IAAIA,EAAE,IAAI,EAAE,CAAC,CAAC;EACjC;EACA,SAASsB,SAASA,CAAC5B,IAAI,EAAE;IACrB,OAAOsB,QAAQ,CAACtB,IAAI,EAAE2B,OAAO,CAAC;EAClC;EACA,SAASE,UAAUA,CAAC5B,EAAE,EAAE;IACpB,MAAMK,EAAE,GAAGL,EAAE,CAACM,UAAU,CAAC,CAAC,CAAC;IAC3B,OAASD,EAAE,IAAI,EAAE,IAAIA,EAAE,IAAI,EAAE;IAAK;IAC7BA,EAAE,IAAI,EAAE,IAAIA,EAAE,IAAI,EAAG;IAAI;IACzBA,EAAE,IAAI,EAAE,IAAIA,EAAE,IAAI,GAAI,CAAE,CAAC;EAClC;EACA,SAASwB,YAAYA,CAAC9B,IAAI,EAAE;IACxB,OAAOsB,QAAQ,CAACtB,IAAI,EAAE6B,UAAU,CAAC;EACrC;EACA,SAASE,SAASA,CAAC/B,IAAI,EAAE;IACrB,IAAIC,EAAE,GAAG,EAAE;IACX,IAAI+B,GAAG,GAAG,EAAE;IACZ,OAAQ/B,EAAE,GAAG2B,SAAS,CAAC5B,IAAI,CAAC,EAAG;MAC3BgC,GAAG,IAAI/B,EAAE;IACb;IACA,OAAO+B,GAAG;EACd;EACA,SAASC,QAAQA,CAACjC,IAAI,EAAE;IACpB,IAAIG,GAAG,GAAG,EAAE;IACZ,OAAO,IAAI,EAAE;MACT,MAAMF,EAAE,GAAGD,IAAI,CAAC1C,WAAW,CAAC,CAAC;MAC7B,IAAI2C,EAAE,KAAK,GAAG,CAAC,8BACXA,EAAE,KAAK,GAAG,CAAC,+BACXA,EAAE,KAAK,GAAG,CAAC,gCACXA,EAAE,KAAK,GAAG,CAAC,yBACX,CAACA,EAAE,EAAE;QACL;MACJ,CAAC,MACI,IAAIA,EAAE,KAAK9D,OAAO,IAAI8D,EAAE,KAAK5D,OAAO,EAAE;QACvC,IAAI6E,WAAW,CAAClB,IAAI,CAAC,EAAE;UACnBG,GAAG,IAAIF,EAAE;UACTD,IAAI,CAACxC,IAAI,CAAC,CAAC;QACf,CAAC,MACI,IAAI2D,aAAa,CAACnB,IAAI,CAAC,EAAE;UAC1B;QACJ,CAAC,MACI;UACDG,GAAG,IAAIF,EAAE;UACTD,IAAI,CAACxC,IAAI,CAAC,CAAC;QACf;MACJ,CAAC,MACI;QACD2C,GAAG,IAAIF,EAAE;QACTD,IAAI,CAACxC,IAAI,CAAC,CAAC;MACf;IACJ;IACA,OAAO2C,GAAG;EACd;EACA,SAAS+B,mBAAmBA,CAAClC,IAAI,EAAE;IAC/BI,UAAU,CAACJ,IAAI,CAAC;IAChB,IAAIC,EAAE,GAAG,EAAE;IACX,IAAIkC,IAAI,GAAG,EAAE;IACb,OAAQlC,EAAE,GAAGyB,uBAAuB,CAAC1B,IAAI,CAAC,EAAG;MACzCmC,IAAI,IAAIlC,EAAE;IACd;IACA,IAAID,IAAI,CAAC1C,WAAW,CAAC,CAAC,KAAKQ,GAAG,EAAE;MAC5BwB,SAAS,CAACpF,iBAAiB,CAACO,0BAA0B,EAAE6D,eAAe,CAAC,CAAC,EAAE,CAAC,CAAC;IACjF;IACA,OAAO6D,IAAI;EACf;EACA,SAASC,kBAAkBA,CAACpC,IAAI,EAAE;IAC9BI,UAAU,CAACJ,IAAI,CAAC;IAChB,IAAIJ,KAAK,GAAG,EAAE;IACd,IAAII,IAAI,CAAC1C,WAAW,CAAC,CAAC,KAAK,GAAG,EAAE;MAC5B0C,IAAI,CAACxC,IAAI,CAAC,CAAC;MACXoC,KAAK,IAAK,IAAGmC,SAAS,CAAC/B,IAAI,CAAE,EAAC;IAClC,CAAC,MACI;MACDJ,KAAK,IAAImC,SAAS,CAAC/B,IAAI,CAAC;IAC5B;IACA,IAAIA,IAAI,CAAC1C,WAAW,CAAC,CAAC,KAAKQ,GAAG,EAAE;MAC5BwB,SAAS,CAACpF,iBAAiB,CAACO,0BAA0B,EAAE6D,eAAe,CAAC,CAAC,EAAE,CAAC,CAAC;IACjF;IACA,OAAOsB,KAAK;EAChB;EACA,SAASyC,SAASA,CAACpC,EAAE,EAAE;IACnB,OAAOA,EAAE,KAAKhC,iBAAiB,IAAIgC,EAAE,KAAK5D,OAAO;EACrD;EACA,SAASiG,WAAWA,CAACtC,IAAI,EAAE;IACvBI,UAAU,CAACJ,IAAI,CAAC;IAChB;IACAD,GAAG,CAACC,IAAI,EAAG,IAAG,CAAC;IACf,IAAIC,EAAE,GAAG,EAAE;IACX,IAAIsC,OAAO,GAAG,EAAE;IAChB,OAAQtC,EAAE,GAAGqB,QAAQ,CAACtB,IAAI,EAAEqC,SAAS,CAAC,EAAG;MACrC,IAAIpC,EAAE,KAAK,IAAI,EAAE;QACbsC,OAAO,IAAIC,kBAAkB,CAACxC,IAAI,CAAC;MACvC,CAAC,MACI;QACDuC,OAAO,IAAItC,EAAE;MACjB;IACJ;IACA,MAAMwC,OAAO,GAAGzC,IAAI,CAAC1C,WAAW,CAAC,CAAC;IAClC,IAAImF,OAAO,KAAKpG,OAAO,IAAIoG,OAAO,KAAK3E,GAAG,EAAE;MACxCwB,SAAS,CAACpF,iBAAiB,CAACG,wCAAwC,EAAEiE,eAAe,CAAC,CAAC,EAAE,CAAC,CAAC;MAC3F;MACA,IAAImE,OAAO,KAAKpG,OAAO,EAAE;QACrB2D,IAAI,CAACxC,IAAI,CAAC,CAAC;QACX;QACAuC,GAAG,CAACC,IAAI,EAAG,IAAG,CAAC;MACnB;MACA,OAAOuC,OAAO;IAClB;IACA;IACAxC,GAAG,CAACC,IAAI,EAAG,IAAG,CAAC;IACf,OAAOuC,OAAO;EAClB;EACA,SAASC,kBAAkBA,CAACxC,IAAI,EAAE;IAC9B,MAAMC,EAAE,GAAGD,IAAI,CAAC1C,WAAW,CAAC,CAAC;IAC7B,QAAQ2C,EAAE;MACN,KAAK,IAAI;MACT,KAAM,IAAG;QAAE;QACPD,IAAI,CAACxC,IAAI,CAAC,CAAC;QACX,OAAQ,KAAIyC,EAAG,EAAC;MACpB,KAAK,GAAG;QACJ,OAAOyC,yBAAyB,CAAC1C,IAAI,EAAEC,EAAE,EAAE,CAAC,CAAC;MACjD,KAAK,GAAG;QACJ,OAAOyC,yBAAyB,CAAC1C,IAAI,EAAEC,EAAE,EAAE,CAAC,CAAC;MACjD;QACIX,SAAS,CAACpF,iBAAiB,CAACI,uBAAuB,EAAEgE,eAAe,CAAC,CAAC,EAAE,CAAC,EAAE2B,EAAE,CAAC;QAC9E,OAAO,EAAE;IACjB;EACJ;EACA,SAASyC,yBAAyBA,CAAC1C,IAAI,EAAE2C,OAAO,EAAEC,MAAM,EAAE;IACtD7C,GAAG,CAACC,IAAI,EAAE2C,OAAO,CAAC;IAClB,IAAIE,QAAQ,GAAG,EAAE;IACjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,MAAM,EAAEE,CAAC,EAAE,EAAE;MAC7B,MAAM7C,EAAE,GAAG6B,YAAY,CAAC9B,IAAI,CAAC;MAC7B,IAAI,CAACC,EAAE,EAAE;QACLX,SAAS,CAACpF,iBAAiB,CAACK,+BAA+B,EAAE+D,eAAe,CAAC,CAAC,EAAE,CAAC,EAAG,KAAIqE,OAAQ,GAAEE,QAAS,GAAE7C,IAAI,CAAC1C,WAAW,CAAC,CAAE,EAAC,CAAC;QAClI;MACJ;MACAuF,QAAQ,IAAI5C,EAAE;IAClB;IACA,OAAQ,KAAI0C,OAAQ,GAAEE,QAAS,EAAC;EACpC;EACA,SAASE,mBAAmBA,CAAC9C,EAAE,EAAE;IAC7B,OAAQA,EAAE,KAAK,GAAG,CAAC,8BACfA,EAAE,KAAK,GAAG,CAAC,+BACXA,EAAE,KAAK9D,OAAO,IACd8D,EAAE,KAAK5D,OAAO;EACtB;EACA,SAAS2G,qBAAqBA,CAAChD,IAAI,EAAE;IACjCI,UAAU,CAACJ,IAAI,CAAC;IAChB,IAAIC,EAAE,GAAG,EAAE;IACX,IAAIgD,WAAW,GAAG,EAAE;IACpB,OAAQhD,EAAE,GAAGqB,QAAQ,CAACtB,IAAI,EAAE+C,mBAAmB,CAAC,EAAG;MAC/CE,WAAW,IAAIhD,EAAE;IACrB;IACA,OAAOgD,WAAW;EACtB;EACA,SAASC,kBAAkBA,CAAClD,IAAI,EAAE;IAC9B,IAAIC,EAAE,GAAG,EAAE;IACX,IAAIkC,IAAI,GAAG,EAAE;IACb,OAAQlC,EAAE,GAAGuB,kBAAkB,CAACxB,IAAI,CAAC,EAAG;MACpCmC,IAAI,IAAIlC,EAAE;IACd;IACA,OAAOkC,IAAI;EACf;EACA,SAASgB,eAAeA,CAACnD,IAAI,EAAE;IAC3B,MAAMiB,EAAE,GAAId,GAAG,IAAK;MAChB,MAAMF,EAAE,GAAGD,IAAI,CAAC1C,WAAW,CAAC,CAAC;MAC7B,IAAI2C,EAAE,KAAK,GAAG,CAAC,8BACXA,EAAE,KAAK,GAAG,CAAC,gCACXA,EAAE,KAAK,GAAG,CAAC,yBACXA,EAAE,KAAK,GAAG,CAAC,8BACXA,EAAE,KAAK,GAAG,CAAC,+BACX,CAACA,EAAE,EAAE;QACL,OAAOE,GAAG;MACd,CAAC,MACI,IAAIF,EAAE,KAAK9D,OAAO,EAAE;QACrB,OAAOgE,GAAG;MACd,CAAC,MACI,IAAIF,EAAE,KAAK5D,OAAO,IAAI4D,EAAE,KAAKjC,GAAG,EAAE;QACnCmC,GAAG,IAAIF,EAAE;QACTD,IAAI,CAACxC,IAAI,CAAC,CAAC;QACX,OAAOyD,EAAE,CAACd,GAAG,CAAC;MAClB,CAAC,MACI;QACDA,GAAG,IAAIF,EAAE;QACTD,IAAI,CAACxC,IAAI,CAAC,CAAC;QACX,OAAOyD,EAAE,CAACd,GAAG,CAAC;MAClB;IACJ,CAAC;IACD,OAAOc,EAAE,CAAC,EAAE,CAAC;EACjB;EACA,SAASmC,UAAUA,CAACpD,IAAI,EAAE;IACtBI,UAAU,CAACJ,IAAI,CAAC;IAChB,MAAMqD,MAAM,GAAGtD,GAAG,CAACC,IAAI,EAAE,GAAG,CAAC,qBAAqB,CAAC;IACnDI,UAAU,CAACJ,IAAI,CAAC;IAChB,OAAOqD,MAAM;EACjB;EACA;EACA,SAASC,sBAAsBA,CAACtD,IAAI,EAAEZ,OAAO,EAAE;IAC3C,IAAIS,KAAK,GAAG,IAAI;IAChB,MAAMI,EAAE,GAAGD,IAAI,CAAC1C,WAAW,CAAC,CAAC;IAC7B,QAAQ2C,EAAE;MACN,KAAK,GAAG,CAAC;QACL,IAAIb,OAAO,CAACH,SAAS,IAAI,CAAC,EAAE;UACxBK,SAAS,CAACpF,iBAAiB,CAACS,0BAA0B,EAAE2D,eAAe,CAAC,CAAC,EAAE,CAAC,CAAC;QACjF;QACA0B,IAAI,CAACxC,IAAI,CAAC,CAAC;QACXqC,KAAK,GAAGH,QAAQ,CAACN,OAAO,EAAE,CAAC,CAAC,4BAA4B,GAAG,CAAC,0BAA0B,CAAC;QACvFgB,UAAU,CAACJ,IAAI,CAAC;QAChBZ,OAAO,CAACH,SAAS,EAAE;QACnB,OAAOY,KAAK;MAChB,KAAK,GAAG,CAAC;QACL,IAAIT,OAAO,CAACH,SAAS,GAAG,CAAC,IACrBG,OAAO,CAACV,WAAW,KAAK,CAAC,CAAC,4BAA4B;UACtDY,SAAS,CAACpF,iBAAiB,CAACQ,iBAAiB,EAAE4D,eAAe,CAAC,CAAC,EAAE,CAAC,CAAC;QACxE;QACA0B,IAAI,CAACxC,IAAI,CAAC,CAAC;QACXqC,KAAK,GAAGH,QAAQ,CAACN,OAAO,EAAE,CAAC,CAAC,6BAA6B,GAAG,CAAC,2BAA2B,CAAC;QACzFA,OAAO,CAACH,SAAS,EAAE;QACnBG,OAAO,CAACH,SAAS,GAAG,CAAC,IAAImB,UAAU,CAACJ,IAAI,CAAC;QACzC,IAAIZ,OAAO,CAACF,QAAQ,IAAIE,OAAO,CAACH,SAAS,KAAK,CAAC,EAAE;UAC7CG,OAAO,CAACF,QAAQ,GAAG,KAAK;QAC5B;QACA,OAAOW,KAAK;MAChB,KAAK,GAAG,CAAC;QACL,IAAIT,OAAO,CAACH,SAAS,GAAG,CAAC,EAAE;UACvBK,SAAS,CAACpF,iBAAiB,CAACO,0BAA0B,EAAE6D,eAAe,CAAC,CAAC,EAAE,CAAC,CAAC;QACjF;QACAuB,KAAK,GAAG0D,iBAAiB,CAACvD,IAAI,EAAEZ,OAAO,CAAC,IAAIU,WAAW,CAACV,OAAO,CAAC;QAChEA,OAAO,CAACH,SAAS,GAAG,CAAC;QACrB,OAAOY,KAAK;MAChB;QAAS;UACL,IAAI2D,oBAAoB,GAAG,IAAI;UAC/B,IAAIC,mBAAmB,GAAG,IAAI;UAC9B,IAAIC,YAAY,GAAG,IAAI;UACvB,IAAIvC,aAAa,CAACnB,IAAI,CAAC,EAAE;YACrB,IAAIZ,OAAO,CAACH,SAAS,GAAG,CAAC,EAAE;cACvBK,SAAS,CAACpF,iBAAiB,CAACO,0BAA0B,EAAE6D,eAAe,CAAC,CAAC,EAAE,CAAC,CAAC;YACjF;YACAuB,KAAK,GAAGH,QAAQ,CAACN,OAAO,EAAE,CAAC,CAAC,uBAAuBgE,UAAU,CAACpD,IAAI,CAAC,CAAC;YACpE;YACAZ,OAAO,CAACH,SAAS,GAAG,CAAC;YACrBG,OAAO,CAACF,QAAQ,GAAG,KAAK;YACxB,OAAOW,KAAK;UAChB;UACA,IAAIT,OAAO,CAACH,SAAS,GAAG,CAAC,KACpBG,OAAO,CAACV,WAAW,KAAK,CAAC,CAAC,0BACvBU,OAAO,CAACV,WAAW,KAAK,CAAC,CAAC,yBAC1BU,OAAO,CAACV,WAAW,KAAK,CAAC,CAAC,yBAAyB,EAAE;YACzDY,SAAS,CAACpF,iBAAiB,CAACO,0BAA0B,EAAE6D,eAAe,CAAC,CAAC,EAAE,CAAC,CAAC;YAC7Ec,OAAO,CAACH,SAAS,GAAG,CAAC;YACrB,OAAO0E,SAAS,CAAC3D,IAAI,EAAEZ,OAAO,CAAC;UACnC;UACA,IAAKoE,oBAAoB,GAAG/C,sBAAsB,CAACT,IAAI,EAAEZ,OAAO,CAAC,EAAG;YAChES,KAAK,GAAGH,QAAQ,CAACN,OAAO,EAAE,CAAC,CAAC,wBAAwB8C,mBAAmB,CAAClC,IAAI,CAAC,CAAC;YAC9EI,UAAU,CAACJ,IAAI,CAAC;YAChB,OAAOH,KAAK;UAChB;UACA,IAAK4D,mBAAmB,GAAG9C,qBAAqB,CAACX,IAAI,EAAEZ,OAAO,CAAC,EAAG;YAC9DS,KAAK,GAAGH,QAAQ,CAACN,OAAO,EAAE,CAAC,CAAC,uBAAuBgD,kBAAkB,CAACpC,IAAI,CAAC,CAAC;YAC5EI,UAAU,CAACJ,IAAI,CAAC;YAChB,OAAOH,KAAK;UAChB;UACA,IAAK6D,YAAY,GAAG9C,cAAc,CAACZ,IAAI,EAAEZ,OAAO,CAAC,EAAG;YAChDS,KAAK,GAAGH,QAAQ,CAACN,OAAO,EAAE,CAAC,CAAC,0BAA0BkD,WAAW,CAACtC,IAAI,CAAC,CAAC;YACxEI,UAAU,CAACJ,IAAI,CAAC;YAChB,OAAOH,KAAK;UAChB;UACA,IAAI,CAAC2D,oBAAoB,IAAI,CAACC,mBAAmB,IAAI,CAACC,YAAY,EAAE;YAChE;YACA7D,KAAK,GAAGH,QAAQ,CAACN,OAAO,EAAE,EAAE,CAAC,+BAA+B4D,qBAAqB,CAAChD,IAAI,CAAC,CAAC;YACxFV,SAAS,CAACpF,iBAAiB,CAACE,4BAA4B,EAAEkE,eAAe,CAAC,CAAC,EAAE,CAAC,EAAEuB,KAAK,CAACD,KAAK,CAAC;YAC5FQ,UAAU,CAACJ,IAAI,CAAC;YAChB,OAAOH,KAAK;UAChB;UACA;QACJ;IACJ;IACA,OAAOA,KAAK;EAChB;EACA;EACA,SAAS0D,iBAAiBA,CAACvD,IAAI,EAAEZ,OAAO,EAAE;IACtC,MAAM;MAAEV;IAAY,CAAC,GAAGU,OAAO;IAC/B,IAAIS,KAAK,GAAG,IAAI;IAChB,MAAMI,EAAE,GAAGD,IAAI,CAAC1C,WAAW,CAAC,CAAC;IAC7B,IAAI,CAACoB,WAAW,KAAK,CAAC,CAAC,gCACnBA,WAAW,KAAK,CAAC,CAAC,8BAClBA,WAAW,KAAK,EAAE,CAAC,mCACnBA,WAAW,KAAK,CAAC,CAAC,sCACjBuB,EAAE,KAAK5D,OAAO,IAAI4D,EAAE,KAAK9D,OAAO,CAAC,EAAE;MACpCmD,SAAS,CAACpF,iBAAiB,CAACU,qBAAqB,EAAE0D,eAAe,CAAC,CAAC,EAAE,CAAC,CAAC;IAC5E;IACA,QAAQ2B,EAAE;MACN,KAAK,GAAG,CAAC;QACLD,IAAI,CAACxC,IAAI,CAAC,CAAC;QACXqC,KAAK,GAAGH,QAAQ,CAACN,OAAO,EAAE,CAAC,CAAC,8BAA8B,GAAG,CAAC,4BAA4B,CAAC;QAC3FA,OAAO,CAACF,QAAQ,GAAG,IAAI;QACvB,OAAOW,KAAK;MAChB,KAAK,GAAG,CAAC;QACLO,UAAU,CAACJ,IAAI,CAAC;QAChBA,IAAI,CAACxC,IAAI,CAAC,CAAC;QACX,OAAOkC,QAAQ,CAACN,OAAO,EAAE,CAAC,CAAC,4BAA4B,GAAG,CAAC,0BAA0B,CAAC;MAC1F,KAAK,GAAG,CAAC;QACLgB,UAAU,CAACJ,IAAI,CAAC;QAChBA,IAAI,CAACxC,IAAI,CAAC,CAAC;QACX,OAAOkC,QAAQ,CAACN,OAAO,EAAE,CAAC,CAAC,kCAAkC,GAAG,CAAC,gCAAgC,CAAC;MACtG;QACI,IAAI+B,aAAa,CAACnB,IAAI,CAAC,EAAE;UACrBH,KAAK,GAAGH,QAAQ,CAACN,OAAO,EAAE,CAAC,CAAC,uBAAuBgE,UAAU,CAACpD,IAAI,CAAC,CAAC;UACpE;UACAZ,OAAO,CAACH,SAAS,GAAG,CAAC;UACrBG,OAAO,CAACF,QAAQ,GAAG,KAAK;UACxB,OAAOW,KAAK;QAChB;QACA,IAAIgB,gBAAgB,CAACb,IAAI,EAAEZ,OAAO,CAAC,IAC/B2B,sBAAsB,CAACf,IAAI,EAAEZ,OAAO,CAAC,EAAE;UACvCgB,UAAU,CAACJ,IAAI,CAAC;UAChB,OAAOuD,iBAAiB,CAACvD,IAAI,EAAEZ,OAAO,CAAC;QAC3C;QACA,IAAI0B,qBAAqB,CAACd,IAAI,EAAEZ,OAAO,CAAC,EAAE;UACtCgB,UAAU,CAACJ,IAAI,CAAC;UAChB,OAAON,QAAQ,CAACN,OAAO,EAAE,EAAE,CAAC,iCAAiC8D,kBAAkB,CAAClD,IAAI,CAAC,CAAC;QAC1F;QACA,IAAIgB,kBAAkB,CAAChB,IAAI,EAAEZ,OAAO,CAAC,EAAE;UACnCgB,UAAU,CAACJ,IAAI,CAAC;UAChB,IAAIC,EAAE,KAAK,GAAG,CAAC,4BAA4B;YACvC;YACA,OAAOqD,sBAAsB,CAACtD,IAAI,EAAEZ,OAAO,CAAC,IAAIS,KAAK;UACzD,CAAC,MACI;YACD,OAAOH,QAAQ,CAACN,OAAO,EAAE,EAAE,CAAC,4BAA4B+D,eAAe,CAACnD,IAAI,CAAC,CAAC;UAClF;QACJ;QACA,IAAItB,WAAW,KAAK,CAAC,CAAC,8BAA8B;UAChDY,SAAS,CAACpF,iBAAiB,CAACU,qBAAqB,EAAE0D,eAAe,CAAC,CAAC,EAAE,CAAC,CAAC;QAC5E;QACAc,OAAO,CAACH,SAAS,GAAG,CAAC;QACrBG,OAAO,CAACF,QAAQ,GAAG,KAAK;QACxB,OAAOyE,SAAS,CAAC3D,IAAI,EAAEZ,OAAO,CAAC;IACvC;EACJ;EACA;EACA,SAASuE,SAASA,CAAC3D,IAAI,EAAEZ,OAAO,EAAE;IAC9B,IAAIS,KAAK,GAAG;MAAEF,IAAI,EAAE,EAAE,CAAC;IAAqB,CAAC;IAC7C,IAAIP,OAAO,CAACH,SAAS,GAAG,CAAC,EAAE;MACvB,OAAOqE,sBAAsB,CAACtD,IAAI,EAAEZ,OAAO,CAAC,IAAIU,WAAW,CAACV,OAAO,CAAC;IACxE;IACA,IAAIA,OAAO,CAACF,QAAQ,EAAE;MAClB,OAAOqE,iBAAiB,CAACvD,IAAI,EAAEZ,OAAO,CAAC,IAAIU,WAAW,CAACV,OAAO,CAAC;IACnE;IACA,MAAMa,EAAE,GAAGD,IAAI,CAAC1C,WAAW,CAAC,CAAC;IAC7B,QAAQ2C,EAAE;MACN,KAAK,GAAG,CAAC;QACL,OAAOqD,sBAAsB,CAACtD,IAAI,EAAEZ,OAAO,CAAC,IAAIU,WAAW,CAACV,OAAO,CAAC;MACxE,KAAK,GAAG,CAAC;QACLE,SAAS,CAACpF,iBAAiB,CAACM,wBAAwB,EAAE8D,eAAe,CAAC,CAAC,EAAE,CAAC,CAAC;QAC3E0B,IAAI,CAACxC,IAAI,CAAC,CAAC;QACX,OAAOkC,QAAQ,CAACN,OAAO,EAAE,CAAC,CAAC,6BAA6B,GAAG,CAAC,2BAA2B,CAAC;MAC5F,KAAK,GAAG,CAAC;QACL,OAAOmE,iBAAiB,CAACvD,IAAI,EAAEZ,OAAO,CAAC,IAAIU,WAAW,CAACV,OAAO,CAAC;MACnE;QAAS;UACL,IAAI+B,aAAa,CAACnB,IAAI,CAAC,EAAE;YACrBH,KAAK,GAAGH,QAAQ,CAACN,OAAO,EAAE,CAAC,CAAC,uBAAuBgE,UAAU,CAACpD,IAAI,CAAC,CAAC;YACpE;YACAZ,OAAO,CAACH,SAAS,GAAG,CAAC;YACrBG,OAAO,CAACF,QAAQ,GAAG,KAAK;YACxB,OAAOW,KAAK;UAChB;UACA,IAAIqB,WAAW,CAAClB,IAAI,CAAC,EAAE;YACnB,OAAON,QAAQ,CAACN,OAAO,EAAE,CAAC,CAAC,uBAAuB6C,QAAQ,CAACjC,IAAI,CAAC,CAAC;UACrE;UACA;QACJ;IACJ;IACA,OAAOH,KAAK;EAChB;EACA,SAAS+D,SAASA,CAAA,EAAG;IACjB,MAAM;MAAElF,WAAW;MAAEnG,MAAM;MAAEoG,QAAQ;MAAEC;IAAO,CAAC,GAAGH,QAAQ;IAC1DA,QAAQ,CAACI,QAAQ,GAAGH,WAAW;IAC/BD,QAAQ,CAACK,UAAU,GAAGvG,MAAM;IAC5BkG,QAAQ,CAACM,YAAY,GAAGJ,QAAQ;IAChCF,QAAQ,CAACO,UAAU,GAAGJ,MAAM;IAC5BH,QAAQ,CAAClG,MAAM,GAAG8F,aAAa,CAAC,CAAC;IACjCI,QAAQ,CAACE,QAAQ,GAAGL,eAAe,CAAC,CAAC;IACrC,IAAIF,KAAK,CAACd,WAAW,CAAC,CAAC,KAAKQ,GAAG,EAAE;MAC7B,OAAO4B,QAAQ,CAACjB,QAAQ,EAAE,EAAE,CAAC,oBAAoB,CAAC;IACtD;IACA,OAAOkF,SAAS,CAACvF,KAAK,EAAEK,QAAQ,CAAC;EACrC;EACA,OAAO;IACHmF,SAAS;IACTvF,aAAa;IACbC,eAAe;IACfc;EACJ,CAAC;AACL;AAEA,MAAMyE,cAAc,GAAG,QAAQ;AAC/B;AACA,MAAMC,aAAa,GAAG,uDAAuD;AAC7E,SAASC,kBAAkBA,CAAC1K,KAAK,EAAE2K,UAAU,EAAEC,UAAU,EAAE;EACvD,QAAQ5K,KAAK;IACT,KAAM,MAAK;MACP,OAAQ,IAAG;IACf;IACA,KAAM,MAAK;MACP;MACA,OAAQ,IAAG;IACf;MAAS;QACL,MAAM6K,SAAS,GAAGC,QAAQ,CAACH,UAAU,IAAIC,UAAU,EAAE,EAAE,CAAC;QACxD,IAAIC,SAAS,IAAI,MAAM,IAAIA,SAAS,IAAI,MAAM,EAAE;UAC5C,OAAOrI,MAAM,CAACuI,aAAa,CAACF,SAAS,CAAC;QAC1C;QACA;QACA;QACA,OAAO,GAAG;MACd;EACJ;AACJ;AACA,SAASG,YAAYA,CAAC9I,OAAO,GAAG,CAAC,CAAC,EAAE;EAChC,MAAMO,QAAQ,GAAGP,OAAO,CAACO,QAAQ,KAAK,KAAK;EAC3C,MAAM;IAAEuD;EAAQ,CAAC,GAAG9D,OAAO;EAC3B,SAAS+D,SAASA,CAACgF,QAAQ,EAAEhJ,IAAI,EAAElD,KAAK,EAAEG,MAAM,EAAE,GAAGS,IAAI,EAAE;IACvD,MAAMR,GAAG,GAAG8L,QAAQ,CAAChG,eAAe,CAAC,CAAC;IACtC9F,GAAG,CAACD,MAAM,IAAIA,MAAM;IACpBC,GAAG,CAACF,MAAM,IAAIC,MAAM;IACpB,IAAI8G,OAAO,EAAE;MACT,MAAMzG,GAAG,GAAGkD,QAAQ,GAAGpD,cAAc,CAACN,KAAK,EAAEI,GAAG,CAAC,GAAG,IAAI;MACxD,MAAMiH,GAAG,GAAGpE,kBAAkB,CAACC,IAAI,EAAE1C,GAAG,EAAE;QACtC4C,MAAM,EAAEqI,cAAc;QACtB7K;MACJ,CAAC,CAAC;MACFqG,OAAO,CAACI,GAAG,CAAC;IAChB;EACJ;EACA,SAAS8E,SAASA,CAAC5E,IAAI,EAAEpH,MAAM,EAAEK,GAAG,EAAE;IAClC,MAAM4L,IAAI,GAAG;MAAE7E;IAAK,CAAC;IACrB,IAAI7D,QAAQ,EAAE;MACV0I,IAAI,CAACpM,KAAK,GAAGG,MAAM;MACnBiM,IAAI,CAAChM,GAAG,GAAGD,MAAM;MACjBiM,IAAI,CAAC5L,GAAG,GAAG;QAAER,KAAK,EAAEQ,GAAG;QAAEJ,GAAG,EAAEI;MAAI,CAAC;IACvC;IACA,OAAO4L,IAAI;EACf;EACA,SAASC,OAAOA,CAACD,IAAI,EAAEjM,MAAM,EAAEgH,GAAG,EAAEI,IAAI,EAAE;IACtC,IAAIA,IAAI,EAAE;MACN6E,IAAI,CAAC7E,IAAI,GAAGA,IAAI;IACpB;IACA,IAAI7D,QAAQ,EAAE;MACV0I,IAAI,CAAChM,GAAG,GAAGD,MAAM;MACjB,IAAIiM,IAAI,CAAC5L,GAAG,EAAE;QACV4L,IAAI,CAAC5L,GAAG,CAACJ,GAAG,GAAG+G,GAAG;MACtB;IACJ;EACJ;EACA,SAASmF,SAASA,CAACC,SAAS,EAAE/E,KAAK,EAAE;IACjC,MAAMR,OAAO,GAAGuF,SAAS,CAACvF,OAAO,CAAC,CAAC;IACnC,MAAMoF,IAAI,GAAGD,SAAS,CAAC,CAAC,CAAC,sBAAsBnF,OAAO,CAAC7G,MAAM,EAAE6G,OAAO,CAACT,QAAQ,CAAC;IAChF6F,IAAI,CAAC5E,KAAK,GAAGA,KAAK;IAClB6E,OAAO,CAACD,IAAI,EAAEG,SAAS,CAACtG,aAAa,CAAC,CAAC,EAAEsG,SAAS,CAACrG,eAAe,CAAC,CAAC,CAAC;IACrE,OAAOkG,IAAI;EACf;EACA,SAASI,SAASA,CAACD,SAAS,EAAE1K,KAAK,EAAE;IACjC,MAAMmF,OAAO,GAAGuF,SAAS,CAACvF,OAAO,CAAC,CAAC;IACnC,MAAM;MAAEN,UAAU,EAAEvG,MAAM;MAAEwG,YAAY,EAAEnG;IAAI,CAAC,GAAGwG,OAAO,CAAC,CAAC;IAC3D,MAAMoF,IAAI,GAAGD,SAAS,CAAC,CAAC,CAAC,sBAAsBhM,MAAM,EAAEK,GAAG,CAAC;IAC3D4L,IAAI,CAACvK,KAAK,GAAGkK,QAAQ,CAAClK,KAAK,EAAE,EAAE,CAAC;IAChC0K,SAAS,CAACf,SAAS,CAAC,CAAC,CAAC,CAAC;IACvBa,OAAO,CAACD,IAAI,EAAEG,SAAS,CAACtG,aAAa,CAAC,CAAC,EAAEsG,SAAS,CAACrG,eAAe,CAAC,CAAC,CAAC;IACrE,OAAOkG,IAAI;EACf;EACA,SAASK,UAAUA,CAACF,SAAS,EAAEG,GAAG,EAAE;IAChC,MAAM1F,OAAO,GAAGuF,SAAS,CAACvF,OAAO,CAAC,CAAC;IACnC,MAAM;MAAEN,UAAU,EAAEvG,MAAM;MAAEwG,YAAY,EAAEnG;IAAI,CAAC,GAAGwG,OAAO,CAAC,CAAC;IAC3D,MAAMoF,IAAI,GAAGD,SAAS,CAAC,CAAC,CAAC,uBAAuBhM,MAAM,EAAEK,GAAG,CAAC;IAC5D4L,IAAI,CAACM,GAAG,GAAGA,GAAG;IACdH,SAAS,CAACf,SAAS,CAAC,CAAC,CAAC,CAAC;IACvBa,OAAO,CAACD,IAAI,EAAEG,SAAS,CAACtG,aAAa,CAAC,CAAC,EAAEsG,SAAS,CAACrG,eAAe,CAAC,CAAC,CAAC;IACrE,OAAOkG,IAAI;EACf;EACA,SAASO,YAAYA,CAACJ,SAAS,EAAE/E,KAAK,EAAE;IACpC,MAAMR,OAAO,GAAGuF,SAAS,CAACvF,OAAO,CAAC,CAAC;IACnC,MAAM;MAAEN,UAAU,EAAEvG,MAAM;MAAEwG,YAAY,EAAEnG;IAAI,CAAC,GAAGwG,OAAO,CAAC,CAAC;IAC3D,MAAMoF,IAAI,GAAGD,SAAS,CAAC,CAAC,CAAC,yBAAyBhM,MAAM,EAAEK,GAAG,CAAC;IAC9D4L,IAAI,CAAC5E,KAAK,GAAGA,KAAK,CAACxG,OAAO,CAAC0K,aAAa,EAAEC,kBAAkB,CAAC;IAC7DY,SAAS,CAACf,SAAS,CAAC,CAAC,CAAC,CAAC;IACvBa,OAAO,CAACD,IAAI,EAAEG,SAAS,CAACtG,aAAa,CAAC,CAAC,EAAEsG,SAAS,CAACrG,eAAe,CAAC,CAAC,CAAC;IACrE,OAAOkG,IAAI;EACf;EACA,SAASQ,mBAAmBA,CAACL,SAAS,EAAE;IACpC,MAAM9E,KAAK,GAAG8E,SAAS,CAACf,SAAS,CAAC,CAAC;IACnC,MAAMxE,OAAO,GAAGuF,SAAS,CAACvF,OAAO,CAAC,CAAC;IACnC,MAAM;MAAEN,UAAU,EAAEvG,MAAM;MAAEwG,YAAY,EAAEnG;IAAI,CAAC,GAAGwG,OAAO,CAAC,CAAC;IAC3D,MAAMoF,IAAI,GAAGD,SAAS,CAAC,CAAC,CAAC,gCAAgChM,MAAM,EAAEK,GAAG,CAAC;IACrE,IAAIiH,KAAK,CAACF,IAAI,KAAK,EAAE,CAAC,iCAAiC;MACnD;MACAL,SAAS,CAACqF,SAAS,EAAEzK,iBAAiB,CAACY,gCAAgC,EAAEsE,OAAO,CAACL,YAAY,EAAE,CAAC,CAAC;MACjGyF,IAAI,CAAC5E,KAAK,GAAG,EAAE;MACf6E,OAAO,CAACD,IAAI,EAAEjM,MAAM,EAAEK,GAAG,CAAC;MAC1B,OAAO;QACHqM,gBAAgB,EAAEpF,KAAK;QACvB2E;MACJ,CAAC;IACL;IACA;IACA,IAAI3E,KAAK,CAACD,KAAK,IAAI,IAAI,EAAE;MACrBN,SAAS,CAACqF,SAAS,EAAEzK,iBAAiB,CAACc,2BAA2B,EAAEoE,OAAO,CAACL,YAAY,EAAE,CAAC,EAAEmG,eAAe,CAACrF,KAAK,CAAC,CAAC;IACxH;IACA2E,IAAI,CAAC5E,KAAK,GAAGC,KAAK,CAACD,KAAK,IAAI,EAAE;IAC9B6E,OAAO,CAACD,IAAI,EAAEG,SAAS,CAACtG,aAAa,CAAC,CAAC,EAAEsG,SAAS,CAACrG,eAAe,CAAC,CAAC,CAAC;IACrE,OAAO;MACHkG;IACJ,CAAC;EACL;EACA,SAASW,cAAcA,CAACR,SAAS,EAAE/E,KAAK,EAAE;IACtC,MAAMR,OAAO,GAAGuF,SAAS,CAACvF,OAAO,CAAC,CAAC;IACnC,MAAMoF,IAAI,GAAGD,SAAS,CAAC,CAAC,CAAC,2BAA2BnF,OAAO,CAAC7G,MAAM,EAAE6G,OAAO,CAACT,QAAQ,CAAC;IACrF6F,IAAI,CAAC5E,KAAK,GAAGA,KAAK;IAClB6E,OAAO,CAACD,IAAI,EAAEG,SAAS,CAACtG,aAAa,CAAC,CAAC,EAAEsG,SAAS,CAACrG,eAAe,CAAC,CAAC,CAAC;IACrE,OAAOkG,IAAI;EACf;EACA,SAASY,WAAWA,CAACT,SAAS,EAAE;IAC5B,MAAMvF,OAAO,GAAGuF,SAAS,CAACvF,OAAO,CAAC,CAAC;IACnC,MAAMiG,UAAU,GAAGd,SAAS,CAAC,CAAC,CAAC,wBAAwBnF,OAAO,CAAC7G,MAAM,EAAE6G,OAAO,CAACT,QAAQ,CAAC;IACxF,IAAIkB,KAAK,GAAG8E,SAAS,CAACf,SAAS,CAAC,CAAC;IACjC,IAAI/D,KAAK,CAACF,IAAI,KAAK,CAAC,CAAC,4BAA4B;MAC7C,MAAM2F,MAAM,GAAGN,mBAAmB,CAACL,SAAS,CAAC;MAC7CU,UAAU,CAACE,QAAQ,GAAGD,MAAM,CAACd,IAAI;MACjC3E,KAAK,GAAGyF,MAAM,CAACL,gBAAgB,IAAIN,SAAS,CAACf,SAAS,CAAC,CAAC;IAC5D;IACA;IACA,IAAI/D,KAAK,CAACF,IAAI,KAAK,CAAC,CAAC,kCAAkC;MACnDL,SAAS,CAACqF,SAAS,EAAEzK,iBAAiB,CAACc,2BAA2B,EAAEoE,OAAO,CAACL,YAAY,EAAE,CAAC,EAAEmG,eAAe,CAACrF,KAAK,CAAC,CAAC;IACxH;IACAA,KAAK,GAAG8E,SAAS,CAACf,SAAS,CAAC,CAAC;IAC7B;IACA,IAAI/D,KAAK,CAACF,IAAI,KAAK,CAAC,CAAC,4BAA4B;MAC7CE,KAAK,GAAG8E,SAAS,CAACf,SAAS,CAAC,CAAC;IACjC;IACA,QAAQ/D,KAAK,CAACF,IAAI;MACd,KAAK,EAAE,CAAC;QACJ,IAAIE,KAAK,CAACD,KAAK,IAAI,IAAI,EAAE;UACrBN,SAAS,CAACqF,SAAS,EAAEzK,iBAAiB,CAACc,2BAA2B,EAAEoE,OAAO,CAACL,YAAY,EAAE,CAAC,EAAEmG,eAAe,CAACrF,KAAK,CAAC,CAAC;QACxH;QACAwF,UAAU,CAACP,GAAG,GAAGK,cAAc,CAACR,SAAS,EAAE9E,KAAK,CAACD,KAAK,IAAI,EAAE,CAAC;QAC7D;MACJ,KAAK,CAAC,CAAC;QACH,IAAIC,KAAK,CAACD,KAAK,IAAI,IAAI,EAAE;UACrBN,SAAS,CAACqF,SAAS,EAAEzK,iBAAiB,CAACc,2BAA2B,EAAEoE,OAAO,CAACL,YAAY,EAAE,CAAC,EAAEmG,eAAe,CAACrF,KAAK,CAAC,CAAC;QACxH;QACAwF,UAAU,CAACP,GAAG,GAAGD,UAAU,CAACF,SAAS,EAAE9E,KAAK,CAACD,KAAK,IAAI,EAAE,CAAC;QACzD;MACJ,KAAK,CAAC,CAAC;QACH,IAAIC,KAAK,CAACD,KAAK,IAAI,IAAI,EAAE;UACrBN,SAAS,CAACqF,SAAS,EAAEzK,iBAAiB,CAACc,2BAA2B,EAAEoE,OAAO,CAACL,YAAY,EAAE,CAAC,EAAEmG,eAAe,CAACrF,KAAK,CAAC,CAAC;QACxH;QACAwF,UAAU,CAACP,GAAG,GAAGF,SAAS,CAACD,SAAS,EAAE9E,KAAK,CAACD,KAAK,IAAI,EAAE,CAAC;QACxD;MACJ,KAAK,CAAC,CAAC;QACH,IAAIC,KAAK,CAACD,KAAK,IAAI,IAAI,EAAE;UACrBN,SAAS,CAACqF,SAAS,EAAEzK,iBAAiB,CAACc,2BAA2B,EAAEoE,OAAO,CAACL,YAAY,EAAE,CAAC,EAAEmG,eAAe,CAACrF,KAAK,CAAC,CAAC;QACxH;QACAwF,UAAU,CAACP,GAAG,GAAGC,YAAY,CAACJ,SAAS,EAAE9E,KAAK,CAACD,KAAK,IAAI,EAAE,CAAC;QAC3D;MACJ;QAAS;UACL;UACAN,SAAS,CAACqF,SAAS,EAAEzK,iBAAiB,CAACa,2BAA2B,EAAEqE,OAAO,CAACL,YAAY,EAAE,CAAC,CAAC;UAC5F,MAAMyG,WAAW,GAAGb,SAAS,CAACvF,OAAO,CAAC,CAAC;UACvC,MAAMqG,kBAAkB,GAAGlB,SAAS,CAAC,CAAC,CAAC,2BAA2BiB,WAAW,CAACjN,MAAM,EAAEiN,WAAW,CAAC7G,QAAQ,CAAC;UAC3G8G,kBAAkB,CAAC7F,KAAK,GAAG,EAAE;UAC7B6E,OAAO,CAACgB,kBAAkB,EAAED,WAAW,CAACjN,MAAM,EAAEiN,WAAW,CAAC7G,QAAQ,CAAC;UACrE0G,UAAU,CAACP,GAAG,GAAGW,kBAAkB;UACnChB,OAAO,CAACY,UAAU,EAAEG,WAAW,CAACjN,MAAM,EAAEiN,WAAW,CAAC7G,QAAQ,CAAC;UAC7D,OAAO;YACHsG,gBAAgB,EAAEpF,KAAK;YACvB2E,IAAI,EAAEa;UACV,CAAC;QACL;IACJ;IACAZ,OAAO,CAACY,UAAU,EAAEV,SAAS,CAACtG,aAAa,CAAC,CAAC,EAAEsG,SAAS,CAACrG,eAAe,CAAC,CAAC,CAAC;IAC3E,OAAO;MACHkG,IAAI,EAAEa;IACV,CAAC;EACL;EACA,SAASK,YAAYA,CAACf,SAAS,EAAE;IAC7B,MAAMvF,OAAO,GAAGuF,SAAS,CAACvF,OAAO,CAAC,CAAC;IACnC,MAAMuG,WAAW,GAAGvG,OAAO,CAACV,WAAW,KAAK,CAAC,CAAC,wBACxCiG,SAAS,CAACtG,aAAa,CAAC,CAAC,GACzBe,OAAO,CAAC7G,MAAM;IACpB,MAAMoG,QAAQ,GAAGS,OAAO,CAACV,WAAW,KAAK,CAAC,CAAC,wBACrCU,OAAO,CAACR,MAAM,GACdQ,OAAO,CAACT,QAAQ;IACtB,MAAM6F,IAAI,GAAGD,SAAS,CAAC,CAAC,CAAC,yBAAyBoB,WAAW,EAAEhH,QAAQ,CAAC;IACxE6F,IAAI,CAAC5K,KAAK,GAAG,EAAE;IACf,IAAIgK,SAAS,GAAG,IAAI;IACpB,GAAG;MACC,MAAM/D,KAAK,GAAG+D,SAAS,IAAIe,SAAS,CAACf,SAAS,CAAC,CAAC;MAChDA,SAAS,GAAG,IAAI;MAChB,QAAQ/D,KAAK,CAACF,IAAI;QACd,KAAK,CAAC,CAAC;UACH,IAAIE,KAAK,CAACD,KAAK,IAAI,IAAI,EAAE;YACrBN,SAAS,CAACqF,SAAS,EAAEzK,iBAAiB,CAACc,2BAA2B,EAAEoE,OAAO,CAACL,YAAY,EAAE,CAAC,EAAEmG,eAAe,CAACrF,KAAK,CAAC,CAAC;UACxH;UACA2E,IAAI,CAAC5K,KAAK,CAACgM,IAAI,CAAClB,SAAS,CAACC,SAAS,EAAE9E,KAAK,CAACD,KAAK,IAAI,EAAE,CAAC,CAAC;UACxD;QACJ,KAAK,CAAC,CAAC;UACH,IAAIC,KAAK,CAACD,KAAK,IAAI,IAAI,EAAE;YACrBN,SAAS,CAACqF,SAAS,EAAEzK,iBAAiB,CAACc,2BAA2B,EAAEoE,OAAO,CAACL,YAAY,EAAE,CAAC,EAAEmG,eAAe,CAACrF,KAAK,CAAC,CAAC;UACxH;UACA2E,IAAI,CAAC5K,KAAK,CAACgM,IAAI,CAAChB,SAAS,CAACD,SAAS,EAAE9E,KAAK,CAACD,KAAK,IAAI,EAAE,CAAC,CAAC;UACxD;QACJ,KAAK,CAAC,CAAC;UACH,IAAIC,KAAK,CAACD,KAAK,IAAI,IAAI,EAAE;YACrBN,SAAS,CAACqF,SAAS,EAAEzK,iBAAiB,CAACc,2BAA2B,EAAEoE,OAAO,CAACL,YAAY,EAAE,CAAC,EAAEmG,eAAe,CAACrF,KAAK,CAAC,CAAC;UACxH;UACA2E,IAAI,CAAC5K,KAAK,CAACgM,IAAI,CAACf,UAAU,CAACF,SAAS,EAAE9E,KAAK,CAACD,KAAK,IAAI,EAAE,CAAC,CAAC;UACzD;QACJ,KAAK,CAAC,CAAC;UACH,IAAIC,KAAK,CAACD,KAAK,IAAI,IAAI,EAAE;YACrBN,SAAS,CAACqF,SAAS,EAAEzK,iBAAiB,CAACc,2BAA2B,EAAEoE,OAAO,CAACL,YAAY,EAAE,CAAC,EAAEmG,eAAe,CAACrF,KAAK,CAAC,CAAC;UACxH;UACA2E,IAAI,CAAC5K,KAAK,CAACgM,IAAI,CAACb,YAAY,CAACJ,SAAS,EAAE9E,KAAK,CAACD,KAAK,IAAI,EAAE,CAAC,CAAC;UAC3D;QACJ,KAAK,CAAC,CAAC;UAA8B;YACjC,MAAM0F,MAAM,GAAGF,WAAW,CAACT,SAAS,CAAC;YACrCH,IAAI,CAAC5K,KAAK,CAACgM,IAAI,CAACN,MAAM,CAACd,IAAI,CAAC;YAC5BZ,SAAS,GAAG0B,MAAM,CAACL,gBAAgB,IAAI,IAAI;YAC3C;UACJ;MACJ;IACJ,CAAC,QAAQ7F,OAAO,CAACV,WAAW,KAAK,EAAE,CAAC,wBAChCU,OAAO,CAACV,WAAW,KAAK,CAAC,CAAC;IAC9B;IACA,MAAMmH,SAAS,GAAGzG,OAAO,CAACV,WAAW,KAAK,CAAC,CAAC,wBACtCU,OAAO,CAACN,UAAU,GAClB6F,SAAS,CAACtG,aAAa,CAAC,CAAC;IAC/B,MAAMO,MAAM,GAAGQ,OAAO,CAACV,WAAW,KAAK,CAAC,CAAC,wBACnCU,OAAO,CAACJ,UAAU,GAClB2F,SAAS,CAACrG,eAAe,CAAC,CAAC;IACjCmG,OAAO,CAACD,IAAI,EAAEqB,SAAS,EAAEjH,MAAM,CAAC;IAChC,OAAO4F,IAAI;EACf;EACA,SAASsB,WAAWA,CAACnB,SAAS,EAAEpM,MAAM,EAAEK,GAAG,EAAEmN,OAAO,EAAE;IAClD,MAAM3G,OAAO,GAAGuF,SAAS,CAACvF,OAAO,CAAC,CAAC;IACnC,IAAI4G,eAAe,GAAGD,OAAO,CAACnM,KAAK,CAACX,MAAM,KAAK,CAAC;IAChD,MAAMuL,IAAI,GAAGD,SAAS,CAAC,CAAC,CAAC,wBAAwBhM,MAAM,EAAEK,GAAG,CAAC;IAC7D4L,IAAI,CAACyB,KAAK,GAAG,EAAE;IACfzB,IAAI,CAACyB,KAAK,CAACL,IAAI,CAACG,OAAO,CAAC;IACxB,GAAG;MACC,MAAMrK,GAAG,GAAGgK,YAAY,CAACf,SAAS,CAAC;MACnC,IAAI,CAACqB,eAAe,EAAE;QAClBA,eAAe,GAAGtK,GAAG,CAAC9B,KAAK,CAACX,MAAM,KAAK,CAAC;MAC5C;MACAuL,IAAI,CAACyB,KAAK,CAACL,IAAI,CAAClK,GAAG,CAAC;IACxB,CAAC,QAAQ0D,OAAO,CAACV,WAAW,KAAK,EAAE,CAAC;IACpC,IAAIsH,eAAe,EAAE;MACjB1G,SAAS,CAACqF,SAAS,EAAEzK,iBAAiB,CAACW,4BAA4B,EAAEjC,GAAG,EAAE,CAAC,CAAC;IAChF;IACA6L,OAAO,CAACD,IAAI,EAAEG,SAAS,CAACtG,aAAa,CAAC,CAAC,EAAEsG,SAAS,CAACrG,eAAe,CAAC,CAAC,CAAC;IACrE,OAAOkG,IAAI;EACf;EACA,SAAS0B,aAAaA,CAACvB,SAAS,EAAE;IAC9B,MAAMvF,OAAO,GAAGuF,SAAS,CAACvF,OAAO,CAAC,CAAC;IACnC,MAAM;MAAE7G,MAAM;MAAEoG;IAAS,CAAC,GAAGS,OAAO;IACpC,MAAM2G,OAAO,GAAGL,YAAY,CAACf,SAAS,CAAC;IACvC,IAAIvF,OAAO,CAACV,WAAW,KAAK,EAAE,CAAC,sBAAsB;MACjD,OAAOqH,OAAO;IAClB,CAAC,MACI;MACD,OAAOD,WAAW,CAACnB,SAAS,EAAEpM,MAAM,EAAEoG,QAAQ,EAAEoH,OAAO,CAAC;IAC5D;EACJ;EACA,SAASI,KAAKA,CAACxN,MAAM,EAAE;IACnB,MAAMgM,SAAS,GAAGxG,eAAe,CAACxF,MAAM,EAAEY,MAAM,CAAC,CAAC,CAAC,EAAEgC,OAAO,CAAC,CAAC;IAC9D,MAAM6D,OAAO,GAAGuF,SAAS,CAACvF,OAAO,CAAC,CAAC;IACnC,MAAMoF,IAAI,GAAGD,SAAS,CAAC,CAAC,CAAC,0BAA0BnF,OAAO,CAAC7G,MAAM,EAAE6G,OAAO,CAACT,QAAQ,CAAC;IACpF,IAAI7C,QAAQ,IAAI0I,IAAI,CAAC5L,GAAG,EAAE;MACtB4L,IAAI,CAAC5L,GAAG,CAACD,MAAM,GAAGA,MAAM;IAC5B;IACA6L,IAAI,CAAC4B,IAAI,GAAGF,aAAa,CAACvB,SAAS,CAAC;IACpC,IAAIpJ,OAAO,CAAC8K,UAAU,EAAE;MACpB7B,IAAI,CAAC8B,QAAQ,GAAG/K,OAAO,CAAC8K,UAAU,CAAC1N,MAAM,CAAC;IAC9C;IACA;IACA,IAAIyG,OAAO,CAACV,WAAW,KAAK,EAAE,CAAC,sBAAsB;MACjDY,SAAS,CAACqF,SAAS,EAAEzK,iBAAiB,CAACc,2BAA2B,EAAEoE,OAAO,CAACL,YAAY,EAAE,CAAC,EAAEpG,MAAM,CAACyG,OAAO,CAAC7G,MAAM,CAAC,IAAI,EAAE,CAAC;IAC9H;IACAkM,OAAO,CAACD,IAAI,EAAEG,SAAS,CAACtG,aAAa,CAAC,CAAC,EAAEsG,SAAS,CAACrG,eAAe,CAAC,CAAC,CAAC;IACrE,OAAOkG,IAAI;EACf;EACA,OAAO;IAAE2B;EAAM,CAAC;AACpB;AACA,SAASjB,eAAeA,CAACrF,KAAK,EAAE;EAC5B,IAAIA,KAAK,CAACF,IAAI,KAAK,EAAE,CAAC,sBAAsB;IACxC,OAAO,KAAK;EAChB;EACA,MAAMwC,IAAI,GAAG,CAACtC,KAAK,CAACD,KAAK,IAAI,EAAE,EAAExG,OAAO,CAAC,SAAS,EAAE,KAAK,CAAC;EAC1D,OAAO+I,IAAI,CAAClJ,MAAM,GAAG,EAAE,GAAGkJ,IAAI,CAACoE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,GAAG,GAAGpE,IAAI;AAC3D;AAEA,SAASqE,iBAAiBA,CAACC,GAAG,EAAElL,OAAO,GAAG,CAAC,CAAC,CAAC;AAAA,EAC3C;EACE,MAAMkD,QAAQ,GAAG;IACbgI,GAAG;IACHC,OAAO,EAAE,IAAIC,GAAG,CAAC;EACrB,CAAC;EACD,MAAMvH,OAAO,GAAGA,CAAA,KAAMX,QAAQ;EAC9B,MAAMmI,MAAM,GAAIzE,IAAI,IAAK;IACrB1D,QAAQ,CAACiI,OAAO,CAACG,GAAG,CAAC1E,IAAI,CAAC;IAC1B,OAAOA,IAAI;EACf,CAAC;EACD,OAAO;IAAE/C,OAAO;IAAEwH;EAAO,CAAC;AAC9B;AACA,SAASE,aAAaA,CAACC,KAAK,EAAEC,WAAW,EAAE;EACvC,KAAK,IAAIlE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGiE,KAAK,CAAC9N,MAAM,EAAE6J,CAAC,EAAE,EAAE;IACnCmE,YAAY,CAACF,KAAK,CAACjE,CAAC,CAAC,EAAEkE,WAAW,CAAC;EACvC;AACJ;AACA,SAASC,YAAYA,CAACzC,IAAI,EAAEwC,WAAW,EAAE;EACrC;EACA,QAAQxC,IAAI,CAAC7E,IAAI;IACb,KAAK,CAAC,CAAC;MACHmH,aAAa,CAACtC,IAAI,CAACyB,KAAK,EAAEe,WAAW,CAAC;MACtCA,WAAW,CAACJ,MAAM,CAAC,QAAQ,CAAC,0BAA0B,CAAC;MACvD;IACJ,KAAK,CAAC,CAAC;MACHE,aAAa,CAACtC,IAAI,CAAC5K,KAAK,EAAEoN,WAAW,CAAC;MACtC;IACJ,KAAK,CAAC,CAAC;MAAwB;QAC3B,MAAME,MAAM,GAAG1C,IAAI;QACnByC,YAAY,CAACC,MAAM,CAACpC,GAAG,EAAEkC,WAAW,CAAC;QACrCA,WAAW,CAACJ,MAAM,CAAC,QAAQ,CAAC,0BAA0B,CAAC;QACvDI,WAAW,CAACJ,MAAM,CAAC,MAAM,CAAC,wBAAwB,CAAC;QACnD;MACJ;IACA,KAAK,CAAC,CAAC;MACHI,WAAW,CAACJ,MAAM,CAAC,aAAa,CAAC,+BAA+B,CAAC;MACjEI,WAAW,CAACJ,MAAM,CAAC,MAAM,CAAC,wBAAwB,CAAC;MACnD;IACJ,KAAK,CAAC,CAAC;MACHI,WAAW,CAACJ,MAAM,CAAC,aAAa,CAAC,+BAA+B,CAAC;MACjEI,WAAW,CAACJ,MAAM,CAAC,OAAO,CAAC,yBAAyB,CAAC;MACrD;EACR;EACA;AACJ;AACA;AACA,SAASO,SAASA,CAACV,GAAG,EAAElL,OAAO,GAAG,CAAC,CAAC,CAAC;AAAA,EACnC;EACE,MAAMyL,WAAW,GAAGR,iBAAiB,CAACC,GAAG,CAAC;EAC1CO,WAAW,CAACJ,MAAM,CAAC,WAAW,CAAC,6BAA6B,CAAC;EAC7D;EACAH,GAAG,CAACL,IAAI,IAAIa,YAAY,CAACR,GAAG,CAACL,IAAI,EAAEY,WAAW,CAAC;EAC/C;EACA,MAAM5H,OAAO,GAAG4H,WAAW,CAAC5H,OAAO,CAAC,CAAC;EACrCqH,GAAG,CAACC,OAAO,GAAGU,KAAK,CAACC,IAAI,CAACjI,OAAO,CAACsH,OAAO,CAAC;AAC7C;AAEA,SAASY,QAAQA,CAACb,GAAG,EAAE;EACnB,MAAML,IAAI,GAAGK,GAAG,CAACL,IAAI;EACrB,IAAIA,IAAI,CAACzG,IAAI,KAAK,CAAC,CAAC,yBAAyB;IACzC4H,mBAAmB,CAACnB,IAAI,CAAC;EAC7B,CAAC,MACI;IACDA,IAAI,CAACH,KAAK,CAACuB,OAAO,CAACC,CAAC,IAAIF,mBAAmB,CAACE,CAAC,CAAC,CAAC;EACnD;EACA,OAAOhB,GAAG;AACd;AACA,SAASc,mBAAmBA,CAACxO,OAAO,EAAE;EAClC,IAAIA,OAAO,CAACa,KAAK,CAACX,MAAM,KAAK,CAAC,EAAE;IAC5B,MAAMe,IAAI,GAAGjB,OAAO,CAACa,KAAK,CAAC,CAAC,CAAC;IAC7B,IAAII,IAAI,CAAC2F,IAAI,KAAK,CAAC,CAAC,wBAAwB3F,IAAI,CAAC2F,IAAI,KAAK,CAAC,CAAC,yBAAyB;MACjF5G,OAAO,CAAC2O,MAAM,GAAG1N,IAAI,CAAC4F,KAAK;MAC3B,OAAO5F,IAAI,CAAC4F,KAAK,CAAC,CAAC;IACvB;EACJ,CAAC,MACI;IACD,MAAM+H,MAAM,GAAG,EAAE;IACjB,KAAK,IAAI7E,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG/J,OAAO,CAACa,KAAK,CAACX,MAAM,EAAE6J,CAAC,EAAE,EAAE;MAC3C,MAAM9I,IAAI,GAAGjB,OAAO,CAACa,KAAK,CAACkJ,CAAC,CAAC;MAC7B,IAAI,EAAE9I,IAAI,CAAC2F,IAAI,KAAK,CAAC,CAAC,wBAAwB3F,IAAI,CAAC2F,IAAI,KAAK,CAAC,CAAC,wBAAwB,EAAE;QACpF;MACJ;MACA,IAAI3F,IAAI,CAAC4F,KAAK,IAAI,IAAI,EAAE;QACpB;MACJ;MACA+H,MAAM,CAAC/B,IAAI,CAAC5L,IAAI,CAAC4F,KAAK,CAAC;IAC3B;IACA,IAAI+H,MAAM,CAAC1O,MAAM,KAAKF,OAAO,CAACa,KAAK,CAACX,MAAM,EAAE;MACxCF,OAAO,CAAC2O,MAAM,GAAG/N,IAAI,CAACgO,MAAM,CAAC;MAC7B,KAAK,IAAI7E,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG/J,OAAO,CAACa,KAAK,CAACX,MAAM,EAAE6J,CAAC,EAAE,EAAE;QAC3C,MAAM9I,IAAI,GAAGjB,OAAO,CAACa,KAAK,CAACkJ,CAAC,CAAC;QAC7B,IAAI9I,IAAI,CAAC2F,IAAI,KAAK,CAAC,CAAC,wBAAwB3F,IAAI,CAAC2F,IAAI,KAAK,CAAC,CAAC,yBAAyB;UACjF,OAAO3F,IAAI,CAAC4F,KAAK,CAAC,CAAC;QACvB;MACJ;IACJ;EACJ;AACJ;AAEA,MAAMgI,cAAc,GAAG,UAAU;AACjC;AACA,SAASC,MAAMA,CAACrD,IAAI,EAAE;EAClBA,IAAI,CAACsD,CAAC,GAAGtD,IAAI,CAAC7E,IAAI;EAClB,QAAQ6E,IAAI,CAAC7E,IAAI;IACb,KAAK,CAAC,CAAC;MAA0B;QAC7B,MAAMoI,QAAQ,GAAGvD,IAAI;QACrBqD,MAAM,CAACE,QAAQ,CAAC3B,IAAI,CAAC;QACrB2B,QAAQ,CAACC,CAAC,GAAGD,QAAQ,CAAC3B,IAAI;QAC1B,OAAO2B,QAAQ,CAAC3B,IAAI;QACpB;MACJ;IACA,KAAK,CAAC,CAAC;MAAwB;QAC3B,MAAM/C,MAAM,GAAGmB,IAAI;QACnB,MAAMyB,KAAK,GAAG5C,MAAM,CAAC4C,KAAK;QAC1B,KAAK,IAAInD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGmD,KAAK,CAAChN,MAAM,EAAE6J,CAAC,EAAE,EAAE;UACnC+E,MAAM,CAAC5B,KAAK,CAACnD,CAAC,CAAC,CAAC;QACpB;QACAO,MAAM,CAACoE,CAAC,GAAGxB,KAAK;QAChB,OAAO5C,MAAM,CAAC4C,KAAK;QACnB;MACJ;IACA,KAAK,CAAC,CAAC;MAAyB;QAC5B,MAAMlN,OAAO,GAAGyL,IAAI;QACpB,MAAM5K,KAAK,GAAGb,OAAO,CAACa,KAAK;QAC3B,KAAK,IAAIkJ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGlJ,KAAK,CAACX,MAAM,EAAE6J,CAAC,EAAE,EAAE;UACnC+E,MAAM,CAACjO,KAAK,CAACkJ,CAAC,CAAC,CAAC;QACpB;QACA/J,OAAO,CAAC+J,CAAC,GAAGlJ,KAAK;QACjB,OAAOb,OAAO,CAACa,KAAK;QACpB,IAAIb,OAAO,CAAC2O,MAAM,EAAE;UAChB3O,OAAO,CAACkP,CAAC,GAAGlP,OAAO,CAAC2O,MAAM;UAC1B,OAAO3O,OAAO,CAAC2O,MAAM;QACzB;QACA;MACJ;IACA,KAAK,CAAC,CAAC;IACP,KAAK,CAAC,CAAC;IACP,KAAK,CAAC,CAAC;IACP,KAAK,CAAC,CAAC;MAA2B;QAC9B,MAAMQ,SAAS,GAAG1D,IAAI;QACtB,IAAI0D,SAAS,CAACtI,KAAK,EAAE;UACjBsI,SAAS,CAACC,CAAC,GAAGD,SAAS,CAACtI,KAAK;UAC7B,OAAOsI,SAAS,CAACtI,KAAK;QAC1B;QACA;MACJ;IACA,KAAK,CAAC,CAAC;MAAwB;QAC3B,MAAMsH,MAAM,GAAG1C,IAAI;QACnBqD,MAAM,CAACX,MAAM,CAACpC,GAAG,CAAC;QAClBoC,MAAM,CAACkB,CAAC,GAAGlB,MAAM,CAACpC,GAAG;QACrB,OAAOoC,MAAM,CAACpC,GAAG;QACjB,IAAIoC,MAAM,CAAC3B,QAAQ,EAAE;UACjBsC,MAAM,CAACX,MAAM,CAAC3B,QAAQ,CAAC;UACvB2B,MAAM,CAACmB,CAAC,GAAGnB,MAAM,CAAC3B,QAAQ;UAC1B,OAAO2B,MAAM,CAAC3B,QAAQ;QAC1B;QACA;MACJ;IACA,KAAK,CAAC,CAAC;MAAsB;QACzB,MAAM+C,IAAI,GAAG9D,IAAI;QACjB8D,IAAI,CAACxF,CAAC,GAAGwF,IAAI,CAACrO,KAAK;QACnB,OAAOqO,IAAI,CAACrO,KAAK;QACjB;MACJ;IACA,KAAK,CAAC,CAAC;MAAuB;QAC1B,MAAMsO,KAAK,GAAG/D,IAAI;QAClB+D,KAAK,CAACH,CAAC,GAAGG,KAAK,CAACzD,GAAG;QACnB,OAAOyD,KAAK,CAACzD,GAAG;QAChB;MACJ;IACA;MACI;QACI,MAAMzJ,kBAAkB,CAACnB,iBAAiB,CAACgB,4BAA4B,EAAE,IAAI,EAAE;UAC3EM,MAAM,EAAEoM,cAAc;UACtB5O,IAAI,EAAE,CAACwL,IAAI,CAAC7E,IAAI;QACpB,CAAC,CAAC;MACN;EACR;EACA,OAAO6E,IAAI,CAAC7E,IAAI;AACpB;AACA;;AAEA;AACA;AACA,MAAM6I,YAAY,GAAG,QAAQ;AAC7B,SAASC,mBAAmBA,CAAChC,GAAG,EAAElL,OAAO,EAAE;EACvC,MAAM;IAAEmN,SAAS;IAAEC,QAAQ;IAAEC,aAAa;IAAEC,UAAU,EAAEC;EAAY,CAAC,GAAGvN,OAAO;EAC/E,MAAMO,QAAQ,GAAGP,OAAO,CAACO,QAAQ,KAAK,KAAK;EAC3C,MAAM2C,QAAQ,GAAG;IACbkK,QAAQ;IACRrN,IAAI,EAAE,EAAE;IACRhD,MAAM,EAAE,CAAC;IACTD,IAAI,EAAE,CAAC;IACPE,MAAM,EAAE,CAAC;IACTwQ,GAAG,EAAEhL,SAAS;IACd6K,aAAa;IACbC,UAAU,EAAEC,WAAW;IACvBE,WAAW,EAAE;EACjB,CAAC;EACD,IAAIlN,QAAQ,IAAI2K,GAAG,CAAC7N,GAAG,EAAE;IACrB6F,QAAQ,CAAC9F,MAAM,GAAG8N,GAAG,CAAC7N,GAAG,CAACD,MAAM;EACpC;EACA,MAAMyG,OAAO,GAAGA,CAAA,KAAMX,QAAQ;EAC9B,SAASmH,IAAIA,CAACtK,IAAI,EAAEkJ,IAAI,EAAE;IACtB/F,QAAQ,CAACnD,IAAI,IAAIA,IAAI;EACzB;EACA,SAAS2N,QAAQA,CAACC,CAAC,EAAEC,aAAa,GAAG,IAAI,EAAE;IACvC,MAAMC,cAAc,GAAGD,aAAa,GAAGP,aAAa,GAAG,EAAE;IACzDhD,IAAI,CAACkD,WAAW,GAAGM,cAAc,GAAI,IAAG,CAACC,MAAM,CAACH,CAAC,CAAC,GAAGE,cAAc,CAAC;EACxE;EACA,SAASE,MAAMA,CAACC,WAAW,GAAG,IAAI,EAAE;IAChC,MAAMC,KAAK,GAAG,EAAE/K,QAAQ,CAACuK,WAAW;IACpCO,WAAW,IAAIN,QAAQ,CAACO,KAAK,CAAC;EAClC;EACA,SAASC,QAAQA,CAACF,WAAW,GAAG,IAAI,EAAE;IAClC,MAAMC,KAAK,GAAG,EAAE/K,QAAQ,CAACuK,WAAW;IACpCO,WAAW,IAAIN,QAAQ,CAACO,KAAK,CAAC;EAClC;EACA,SAASE,OAAOA,CAAA,EAAG;IACfT,QAAQ,CAACxK,QAAQ,CAACuK,WAAW,CAAC;EAClC;EACA,MAAMpC,MAAM,GAAI9B,GAAG,IAAM,IAAGA,GAAI,EAAC;EACjC,MAAM+D,UAAU,GAAGA,CAAA,KAAMpK,QAAQ,CAACoK,UAAU;EAC5C,OAAO;IACHzJ,OAAO;IACPwG,IAAI;IACJ0D,MAAM;IACNG,QAAQ;IACRC,OAAO;IACP9C,MAAM;IACNiC;EACJ,CAAC;AACL;AACA,SAASc,kBAAkBA,CAACC,SAAS,EAAEpF,IAAI,EAAE;EACzC,MAAM;IAAEoC;EAAO,CAAC,GAAGgD,SAAS;EAC5BA,SAAS,CAAChE,IAAI,CAAE,GAAEgB,MAAM,CAAC,QAAQ,CAAC,0BAA0B,CAAE,GAAE,CAAC;EACjEiD,YAAY,CAACD,SAAS,EAAEpF,IAAI,CAACM,GAAG,CAAC;EACjC,IAAIN,IAAI,CAACe,QAAQ,EAAE;IACfqE,SAAS,CAAChE,IAAI,CAAE,IAAG,CAAC;IACpBiE,YAAY,CAACD,SAAS,EAAEpF,IAAI,CAACe,QAAQ,CAAC;IACtCqE,SAAS,CAAChE,IAAI,CAAE,SAAQ,CAAC;EAC7B,CAAC,MACI;IACDgE,SAAS,CAAChE,IAAI,CAAE,oBAAmB,CAAC;EACxC;EACAgE,SAAS,CAAChE,IAAI,CAAE,GAAE,CAAC;AACvB;AACA,SAASkE,mBAAmBA,CAACF,SAAS,EAAEpF,IAAI,EAAE;EAC1C,MAAM;IAAEoC,MAAM;IAAEiC;EAAW,CAAC,GAAGe,SAAS;EACxCA,SAAS,CAAChE,IAAI,CAAE,GAAEgB,MAAM,CAAC,WAAW,CAAC,6BAA6B,CAAE,IAAG,CAAC;EACxEgD,SAAS,CAACN,MAAM,CAACT,UAAU,CAAC,CAAC,CAAC;EAC9B,MAAM5P,MAAM,GAAGuL,IAAI,CAAC5K,KAAK,CAACX,MAAM;EAChC,KAAK,IAAI6J,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG7J,MAAM,EAAE6J,CAAC,EAAE,EAAE;IAC7B+G,YAAY,CAACD,SAAS,EAAEpF,IAAI,CAAC5K,KAAK,CAACkJ,CAAC,CAAC,CAAC;IACtC,IAAIA,CAAC,KAAK7J,MAAM,GAAG,CAAC,EAAE;MAClB;IACJ;IACA2Q,SAAS,CAAChE,IAAI,CAAC,IAAI,CAAC;EACxB;EACAgE,SAAS,CAACH,QAAQ,CAACZ,UAAU,CAAC,CAAC,CAAC;EAChCe,SAAS,CAAChE,IAAI,CAAC,IAAI,CAAC;AACxB;AACA,SAASmE,kBAAkBA,CAACH,SAAS,EAAEpF,IAAI,EAAE;EACzC,MAAM;IAAEoC,MAAM;IAAEiC;EAAW,CAAC,GAAGe,SAAS;EACxC,IAAIpF,IAAI,CAACyB,KAAK,CAAChN,MAAM,GAAG,CAAC,EAAE;IACvB2Q,SAAS,CAAChE,IAAI,CAAE,GAAEgB,MAAM,CAAC,QAAQ,CAAC,0BAA0B,CAAE,IAAG,CAAC;IAClEgD,SAAS,CAACN,MAAM,CAACT,UAAU,CAAC,CAAC,CAAC;IAC9B,MAAM5P,MAAM,GAAGuL,IAAI,CAACyB,KAAK,CAAChN,MAAM;IAChC,KAAK,IAAI6J,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG7J,MAAM,EAAE6J,CAAC,EAAE,EAAE;MAC7B+G,YAAY,CAACD,SAAS,EAAEpF,IAAI,CAACyB,KAAK,CAACnD,CAAC,CAAC,CAAC;MACtC,IAAIA,CAAC,KAAK7J,MAAM,GAAG,CAAC,EAAE;QAClB;MACJ;MACA2Q,SAAS,CAAChE,IAAI,CAAC,IAAI,CAAC;IACxB;IACAgE,SAAS,CAACH,QAAQ,CAACZ,UAAU,CAAC,CAAC,CAAC;IAChCe,SAAS,CAAChE,IAAI,CAAE,IAAG,CAAC;EACxB;AACJ;AACA,SAASoE,gBAAgBA,CAACJ,SAAS,EAAEpF,IAAI,EAAE;EACvC,IAAIA,IAAI,CAAC4B,IAAI,EAAE;IACXyD,YAAY,CAACD,SAAS,EAAEpF,IAAI,CAAC4B,IAAI,CAAC;EACtC,CAAC,MACI;IACDwD,SAAS,CAAChE,IAAI,CAAC,MAAM,CAAC;EAC1B;AACJ;AACA,SAASiE,YAAYA,CAACD,SAAS,EAAEpF,IAAI,EAAE;EACnC,MAAM;IAAEoC;EAAO,CAAC,GAAGgD,SAAS;EAC5B,QAAQpF,IAAI,CAAC7E,IAAI;IACb,KAAK,CAAC,CAAC;MACHqK,gBAAgB,CAACJ,SAAS,EAAEpF,IAAI,CAAC;MACjC;IACJ,KAAK,CAAC,CAAC;MACHuF,kBAAkB,CAACH,SAAS,EAAEpF,IAAI,CAAC;MACnC;IACJ,KAAK,CAAC,CAAC;MACHsF,mBAAmB,CAACF,SAAS,EAAEpF,IAAI,CAAC;MACpC;IACJ,KAAK,CAAC,CAAC;MACHmF,kBAAkB,CAACC,SAAS,EAAEpF,IAAI,CAAC;MACnC;IACJ,KAAK,CAAC,CAAC;MACHoF,SAAS,CAAChE,IAAI,CAACqE,IAAI,CAACC,SAAS,CAAC1F,IAAI,CAAC5E,KAAK,CAAC,EAAE4E,IAAI,CAAC;MAChD;IACJ,KAAK,CAAC,CAAC;MACHoF,SAAS,CAAChE,IAAI,CAACqE,IAAI,CAACC,SAAS,CAAC1F,IAAI,CAAC5E,KAAK,CAAC,EAAE4E,IAAI,CAAC;MAChD;IACJ,KAAK,CAAC,CAAC;MACHoF,SAAS,CAAChE,IAAI,CAAE,GAAEgB,MAAM,CAAC,aAAa,CAAC,+BAA+B,CAAE,IAAGA,MAAM,CAAC,MAAM,CAAC,wBAAwB,CAAE,IAAGpC,IAAI,CAACvK,KAAM,IAAG,EAAEuK,IAAI,CAAC;MAC3I;IACJ,KAAK,CAAC,CAAC;MACHoF,SAAS,CAAChE,IAAI,CAAE,GAAEgB,MAAM,CAAC,aAAa,CAAC,+BAA+B,CAAE,IAAGA,MAAM,CAAC,OAAO,CAAC,yBAAyB,CAAE,IAAGqD,IAAI,CAACC,SAAS,CAAC1F,IAAI,CAACM,GAAG,CAAE,IAAG,EAAEN,IAAI,CAAC;MAC3J;IACJ,KAAK,CAAC,CAAC;MACHoF,SAAS,CAAChE,IAAI,CAACqE,IAAI,CAACC,SAAS,CAAC1F,IAAI,CAAC5E,KAAK,CAAC,EAAE4E,IAAI,CAAC;MAChD;IACJ,KAAK,CAAC,CAAC;MACHoF,SAAS,CAAChE,IAAI,CAACqE,IAAI,CAACC,SAAS,CAAC1F,IAAI,CAAC5E,KAAK,CAAC,EAAE4E,IAAI,CAAC;MAChD;IACJ;MACI;QACI,MAAMnJ,kBAAkB,CAACnB,iBAAiB,CAACe,2BAA2B,EAAE,IAAI,EAAE;UAC1EO,MAAM,EAAEgN,YAAY;UACpBxP,IAAI,EAAE,CAACwL,IAAI,CAAC7E,IAAI;QACpB,CAAC,CAAC;MACN;EACR;AACJ;AACA;AACA,MAAMwK,QAAQ,GAAGA,CAAC1D,GAAG,EAAElL,OAAO,GAAG,CAAC,CAAC,KAAK;EACpC,MAAM6O,IAAI,GAAG3Q,QAAQ,CAAC8B,OAAO,CAAC6O,IAAI,CAAC,GAAG7O,OAAO,CAAC6O,IAAI,GAAG,QAAQ;EAC7D,MAAMzB,QAAQ,GAAGlP,QAAQ,CAAC8B,OAAO,CAACoN,QAAQ,CAAC,GACrCpN,OAAO,CAACoN,QAAQ,GAChB,cAAc;EACpB,MAAMD,SAAS,GAAG,CAAC,CAACnN,OAAO,CAACmN,SAAS;EACrC;EACA,MAAME,aAAa,GAAGrN,OAAO,CAACqN,aAAa,IAAI,IAAI,GAC7CrN,OAAO,CAACqN,aAAa,GACrBwB,IAAI,KAAK,OAAO,GACZ,GAAG,GACH,IAAI;EACd,MAAMvB,UAAU,GAAGtN,OAAO,CAACsN,UAAU,GAAGtN,OAAO,CAACsN,UAAU,GAAGuB,IAAI,KAAK,OAAO;EAC7E,MAAM1D,OAAO,GAAGD,GAAG,CAACC,OAAO,IAAI,EAAE;EACjC,MAAMkD,SAAS,GAAGnB,mBAAmB,CAAChC,GAAG,EAAE;IACvC2D,IAAI;IACJzB,QAAQ;IACRD,SAAS;IACTE,aAAa;IACbC;EACJ,CAAC,CAAC;EACFe,SAAS,CAAChE,IAAI,CAACwE,IAAI,KAAK,QAAQ,GAAI,0BAAyB,GAAI,YAAW,CAAC;EAC7ER,SAAS,CAACN,MAAM,CAACT,UAAU,CAAC;EAC5B,IAAInC,OAAO,CAACzN,MAAM,GAAG,CAAC,EAAE;IACpB2Q,SAAS,CAAChE,IAAI,CAAE,WAAUjM,IAAI,CAAC+M,OAAO,CAACqC,GAAG,CAACd,CAAC,IAAK,GAAEA,CAAE,MAAKA,CAAE,EAAC,CAAC,EAAE,IAAI,CAAE,UAAS,CAAC;IAChF2B,SAAS,CAACF,OAAO,CAAC,CAAC;EACvB;EACAE,SAAS,CAAChE,IAAI,CAAE,SAAQ,CAAC;EACzBiE,YAAY,CAACD,SAAS,EAAEnD,GAAG,CAAC;EAC5BmD,SAAS,CAACH,QAAQ,CAACZ,UAAU,CAAC;EAC9Be,SAAS,CAAChE,IAAI,CAAE,GAAE,CAAC;EACnB,OAAOa,GAAG,CAACC,OAAO;EAClB,MAAM;IAAEpL,IAAI;IAAEyN;EAAI,CAAC,GAAGa,SAAS,CAACxK,OAAO,CAAC,CAAC;EACzC,OAAO;IACHqH,GAAG;IACHnL,IAAI;IACJyN,GAAG,EAAEA,GAAG,GAAGA,GAAG,CAACsB,MAAM,CAAC,CAAC,GAAGtM,SAAS,CAAC;EACxC,CAAC;AACL,CAAC;AAED,SAASuM,WAAWA,CAAC3R,MAAM,EAAE4C,OAAO,GAAG,CAAC,CAAC,EAAE;EACvC,MAAMgP,eAAe,GAAGhR,MAAM,CAAC,CAAC,CAAC,EAAEgC,OAAO,CAAC;EAC3C,MAAMiP,GAAG,GAAG,CAAC,CAACD,eAAe,CAACC,GAAG;EACjC,MAAMC,YAAY,GAAG,CAAC,CAACF,eAAe,CAAC1C,MAAM;EAC7C,MAAM6C,cAAc,GAAGH,eAAe,CAACjD,QAAQ,IAAI,IAAI,GAAG,IAAI,GAAGiD,eAAe,CAACjD,QAAQ;EACzF;EACA,MAAMqD,MAAM,GAAGtG,YAAY,CAACkG,eAAe,CAAC;EAC5C,MAAM9D,GAAG,GAAGkE,MAAM,CAACxE,KAAK,CAACxN,MAAM,CAAC;EAChC,IAAI,CAAC6R,GAAG,EAAE;IACN;IACArD,SAAS,CAACV,GAAG,EAAE8D,eAAe,CAAC;IAC/B;IACA,OAAOJ,QAAQ,CAAC1D,GAAG,EAAE8D,eAAe,CAAC;EACzC,CAAC,MACI;IACD;IACAG,cAAc,IAAIpD,QAAQ,CAACb,GAAG,CAAC;IAC/B;IACAgE,YAAY,IAAI5C,MAAM,CAACpB,GAAG,CAAC;IAC3B;IACA,OAAO;MAAEA,GAAG;MAAEnL,IAAI,EAAE;IAAG,CAAC;EAC5B;AACJ;AAEA,SAASpB,iBAAiB,EAAE2J,cAAc,IAAI2E,YAAY,EAAErQ,aAAa,EAAEmS,WAAW,EAAEjP,kBAAkB,EAAE3C,cAAc,EAAE2L,YAAY,EAAE5L,cAAc,EAAEsD,cAAc,EAAEE,aAAa,EAAEb,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}